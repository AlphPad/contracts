/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
} from "@alephium/web3";
import { default as SaleBuyerAccountContractJson } from "../launch_sale/generic/SaleBuyerAccount.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace SaleBuyerAccountTypes {
  export type Fields = {
    parentContractAddress: Address;
    accountHolder: Address;
    amountBuy: bigint;
    amountBid: bigint;
    amountClaimed: bigint;
    amountClaimedRefund: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    isSafeToDestroy: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
    getParentContractAddress: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getAccountHolder: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getAmountBuy: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAmountBid: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAmountClaimed: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAmountClaimedRefund: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  SaleBuyerAccountInstance,
  SaleBuyerAccountTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as SaleBuyerAccountTypes.Fields;
  }

  consts = {
    ErrorCodes: {
      ClaimMoreThanBuy: BigInt(1101),
      ClaimMoreThanBid: BigInt(1102),
    },
    AccountBaseErrorCodes: {
      UnauthorizedAccess: BigInt(12101),
      UnsafeDestroy: BigInt(12102),
    },
  };

  at(address: string): SaleBuyerAccountInstance {
    return new SaleBuyerAccountInstance(address);
  }

  tests = {
    destroy: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleBuyerAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "destroy", params);
    },
    isSafeToDestroy: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleBuyerAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<boolean>> => {
      return testMethod(this, "isSafeToDestroy", params);
    },
    assertIsSafeToDestroy: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleBuyerAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "assertIsSafeToDestroy", params);
    },
    assertIsParentTheCaller: async (
      params: TestContractParamsWithoutMaps<
        SaleBuyerAccountTypes.Fields,
        { caller: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "assertIsParentTheCaller", params);
    },
    getParentContractAddress: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleBuyerAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getParentContractAddress", params);
    },
    getAccountHolder: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleBuyerAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getAccountHolder", params);
    },
    buy: async (
      params: TestContractParamsWithoutMaps<
        SaleBuyerAccountTypes.Fields,
        { addAmountBuy: bigint; addAmountBid: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "buy", params);
    },
    claim: async (
      params: TestContractParamsWithoutMaps<
        SaleBuyerAccountTypes.Fields,
        { claimAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "claim", params);
    },
    claimRefund: async (
      params: TestContractParamsWithoutMaps<
        SaleBuyerAccountTypes.Fields,
        { claimAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "claimRefund", params);
    },
    getAmountBuy: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleBuyerAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getAmountBuy", params);
    },
    getAmountBid: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleBuyerAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getAmountBid", params);
    },
    getAmountClaimed: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleBuyerAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getAmountClaimed", params);
    },
    getAmountClaimedRefund: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleBuyerAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getAmountClaimedRefund", params);
    },
  };
}

// Use this object to test and deploy the contract
export const SaleBuyerAccount = new Factory(
  Contract.fromJson(
    SaleBuyerAccountContractJson,
    "",
    "5b85bbcf941c0e29fa634eccc5c21a0545245218348b1c27c9c7fc3980f5913a"
  )
);

// Use this class to interact with the blockchain
export class SaleBuyerAccountInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<SaleBuyerAccountTypes.State> {
    return fetchContractState(SaleBuyerAccount, this);
  }

  methods = {
    isSafeToDestroy: async (
      params?: SaleBuyerAccountTypes.CallMethodParams<"isSafeToDestroy">
    ): Promise<SaleBuyerAccountTypes.CallMethodResult<"isSafeToDestroy">> => {
      return callMethod(
        SaleBuyerAccount,
        this,
        "isSafeToDestroy",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getParentContractAddress: async (
      params?: SaleBuyerAccountTypes.CallMethodParams<"getParentContractAddress">
    ): Promise<
      SaleBuyerAccountTypes.CallMethodResult<"getParentContractAddress">
    > => {
      return callMethod(
        SaleBuyerAccount,
        this,
        "getParentContractAddress",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAccountHolder: async (
      params?: SaleBuyerAccountTypes.CallMethodParams<"getAccountHolder">
    ): Promise<SaleBuyerAccountTypes.CallMethodResult<"getAccountHolder">> => {
      return callMethod(
        SaleBuyerAccount,
        this,
        "getAccountHolder",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAmountBuy: async (
      params?: SaleBuyerAccountTypes.CallMethodParams<"getAmountBuy">
    ): Promise<SaleBuyerAccountTypes.CallMethodResult<"getAmountBuy">> => {
      return callMethod(
        SaleBuyerAccount,
        this,
        "getAmountBuy",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAmountBid: async (
      params?: SaleBuyerAccountTypes.CallMethodParams<"getAmountBid">
    ): Promise<SaleBuyerAccountTypes.CallMethodResult<"getAmountBid">> => {
      return callMethod(
        SaleBuyerAccount,
        this,
        "getAmountBid",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAmountClaimed: async (
      params?: SaleBuyerAccountTypes.CallMethodParams<"getAmountClaimed">
    ): Promise<SaleBuyerAccountTypes.CallMethodResult<"getAmountClaimed">> => {
      return callMethod(
        SaleBuyerAccount,
        this,
        "getAmountClaimed",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAmountClaimedRefund: async (
      params?: SaleBuyerAccountTypes.CallMethodParams<"getAmountClaimedRefund">
    ): Promise<
      SaleBuyerAccountTypes.CallMethodResult<"getAmountClaimedRefund">
    > => {
      return callMethod(
        SaleBuyerAccount,
        this,
        "getAmountClaimedRefund",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends SaleBuyerAccountTypes.MultiCallParams>(
    calls: Calls
  ): Promise<SaleBuyerAccountTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      SaleBuyerAccount,
      this,
      calls,
      getContractByCodeHash
    )) as SaleBuyerAccountTypes.MultiCallResults<Calls>;
  }
}
