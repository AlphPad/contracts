/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as RewardDistributorContractJson } from "../rewards/RewardDistributor.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace RewardDistributorTypes {
  export type Fields = {
    rewardTokenId: HexString;
    stakingContract: HexString;
    genesisDate: bigint;
    epochDuration: bigint;
    totalEpochs: bigint;
    upgradeDelay: bigint;
    accumulatedRewards: bigint;
    totalRewards: HexString;
    currentHarvestEpoch: bigint;
    currentHarvestTotal: bigint;
    currentHarvestDistributed: bigint;
    owner: Address;
    newOwner: Address;
    upgradeCommenced: bigint;
    newCode: HexString;
    newImmFieldsEncoded: HexString;
    newMutFieldsEncoded: HexString;
  };

  export type State = ContractState<Fields>;

  export type ChangeOwnerCommenceEvent = ContractEvent<{
    owner: Address;
    changeOwner: Address;
  }>;
  export type ChangeOwnerApplyEvent = ContractEvent<{
    owner: Address;
    changeOwner: Address;
  }>;
  export type MigrateCommenceEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
  }>;
  export type MigrateApplyEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
  }>;
  export type MigrateWithFieldsCommenceEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
    changeImmFieldsEncoded: HexString;
    changeMutFieldsEncoded: HexString;
  }>;
  export type MigrateWithFieldsApplyEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
    changeImmFieldsEncoded: HexString;
    changeMutFieldsEncoded: HexString;
  }>;
  export type EpochChangedEvent = ContractEvent<{
    epoch: bigint;
    rewardsTransfered: bigint;
    updatedBy: Address;
  }>;
  export type RewardHarvestedEvent = ContractEvent<{
    epoch: bigint;
    harvestedAmount: bigint;
    harvestedBy: Address;
  }>;
  export type RewardAddedEvent = ContractEvent<{
    epoch: bigint;
    addedAmount: bigint;
    addedBy: Address;
  }>;

  export interface CallMethodTable {
    changeOwner: {
      params: CallContractParams<{ changeOwner: Address }>;
      result: CallContractResult<null>;
    };
    migrate: {
      params: CallContractParams<{ changeCode: HexString }>;
      result: CallContractResult<null>;
    };
    migrateWithFields: {
      params: CallContractParams<{
        changeCode: HexString;
        changeImmFieldsEncoded: HexString;
        changeMutFieldsEncoded: HexString;
      }>;
      result: CallContractResult<null>;
    };
    changeOwnerApply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    migrateApply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    migrateWithFieldsApply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    resetUpgrade: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    getUpgradeDelay: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getNewOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getUpgradeCommenced: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getNewCode: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getNewImmFieldsEncoded: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getNewMutFieldsEncoded: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    harvest: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    canHarvest: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
    addRewards: {
      params: CallContractParams<{ sender: Address; amount: bigint }>;
      result: CallContractResult<null>;
    };
    getTotalPendingRewards: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getCurrentEpoch: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getGenesisDate: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getEpochDuration: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getTotalEpochs: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAccumulatedRewards: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getTotalRewards: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    changeOwner: {
      params: SignExecuteContractMethodParams<{ changeOwner: Address }>;
      result: SignExecuteScriptTxResult;
    };
    migrate: {
      params: SignExecuteContractMethodParams<{ changeCode: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    migrateWithFields: {
      params: SignExecuteContractMethodParams<{
        changeCode: HexString;
        changeImmFieldsEncoded: HexString;
        changeMutFieldsEncoded: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    changeOwnerApply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    migrateApply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    migrateWithFieldsApply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    resetUpgrade: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getUpgradeDelay: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getOwner: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewOwner: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getUpgradeCommenced: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewCode: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewImmFieldsEncoded: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewMutFieldsEncoded: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    harvest: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    canHarvest: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    addRewards: {
      params: SignExecuteContractMethodParams<{
        sender: Address;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getTotalPendingRewards: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getCurrentEpoch: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getGenesisDate: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getEpochDuration: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getTotalEpochs: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getAccumulatedRewards: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getTotalRewards: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  RewardDistributorInstance,
  RewardDistributorTypes.Fields
> {
  encodeFields(fields: RewardDistributorTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as RewardDistributorTypes.Fields;
  }

  eventIndex = {
    ChangeOwnerCommence: 0,
    ChangeOwnerApply: 1,
    MigrateCommence: 2,
    MigrateApply: 3,
    MigrateWithFieldsCommence: 4,
    MigrateWithFieldsApply: 5,
    EpochChanged: 6,
    RewardHarvested: 7,
    RewardAdded: 8,
  };
  consts = {
    UpgradeErrorCodes: {
      Forbidden: BigInt(13000),
      UpgradePending: BigInt(13001),
      UpgradeNotPending: BigInt(13002),
      UpgradeDelayNotExpired: BigInt(13003),
      MigrateNotPending: BigInt(13004),
      MigrateWithFieldsNotPending: BigInt(13005),
      ChangeOwnerNotPending: BigInt(13006),
    },
    ErrorCodes: {
      RewardsNotInitialized: BigInt(201),
      HarvestValueTooSmall: BigInt(202),
      EpochsIsZero: BigInt(203),
    },
  };

  at(address: string): RewardDistributorInstance {
    return new RewardDistributorInstance(address);
  }

  tests = {
    changeOwner: async (
      params: TestContractParamsWithoutMaps<
        RewardDistributorTypes.Fields,
        { changeOwner: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "changeOwner", params, getContractByCodeHash);
    },
    migrate: async (
      params: TestContractParamsWithoutMaps<
        RewardDistributorTypes.Fields,
        { changeCode: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "migrate", params, getContractByCodeHash);
    },
    migrateWithFields: async (
      params: TestContractParamsWithoutMaps<
        RewardDistributorTypes.Fields,
        {
          changeCode: HexString;
          changeImmFieldsEncoded: HexString;
          changeMutFieldsEncoded: HexString;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "migrateWithFields",
        params,
        getContractByCodeHash
      );
    },
    changeOwnerApply: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "changeOwnerApply",
        params,
        getContractByCodeHash
      );
    },
    migrateApply: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "migrateApply", params, getContractByCodeHash);
    },
    migrateWithFieldsApply: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "migrateWithFieldsApply",
        params,
        getContractByCodeHash
      );
    },
    resetUpgrade: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "resetUpgrade", params, getContractByCodeHash);
    },
    getUpgradeDelay: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getUpgradeDelay", params, getContractByCodeHash);
    },
    getOwner: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getOwner", params, getContractByCodeHash);
    },
    getNewOwner: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getNewOwner", params, getContractByCodeHash);
    },
    getUpgradeCommenced: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getUpgradeCommenced",
        params,
        getContractByCodeHash
      );
    },
    getNewCode: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getNewCode", params, getContractByCodeHash);
    },
    getNewImmFieldsEncoded: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getNewImmFieldsEncoded",
        params,
        getContractByCodeHash
      );
    },
    getNewMutFieldsEncoded: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getNewMutFieldsEncoded",
        params,
        getContractByCodeHash
      );
    },
    resetFields: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "resetFields", params, getContractByCodeHash);
    },
    assertOnlyOwner: async (
      params: TestContractParamsWithoutMaps<
        RewardDistributorTypes.Fields,
        { caller: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "assertOnlyOwner", params, getContractByCodeHash);
    },
    assertUpgradeNotPending: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "assertUpgradeNotPending",
        params,
        getContractByCodeHash
      );
    },
    assertUpgradeDelayElapsed: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "assertUpgradeDelayElapsed",
        params,
        getContractByCodeHash
      );
    },
    harvest: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "harvest", params, getContractByCodeHash);
    },
    canHarvest: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<boolean>> => {
      return testMethod(this, "canHarvest", params, getContractByCodeHash);
    },
    addRewards: async (
      params: TestContractParamsWithoutMaps<
        RewardDistributorTypes.Fields,
        { sender: Address; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "addRewards", params, getContractByCodeHash);
    },
    getTotalPendingRewards: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getTotalPendingRewards",
        params,
        getContractByCodeHash
      );
    },
    getCurrentEpoch: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getCurrentEpoch", params, getContractByCodeHash);
    },
    getGenesisDate: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getGenesisDate", params, getContractByCodeHash);
    },
    getEpochDuration: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getEpochDuration",
        params,
        getContractByCodeHash
      );
    },
    getTotalEpochs: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getTotalEpochs", params, getContractByCodeHash);
    },
    getAccumulatedRewards: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getAccumulatedRewards",
        params,
        getContractByCodeHash
      );
    },
    getTotalRewards: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getTotalRewards", params, getContractByCodeHash);
    },
    assertTotalRewardsIsInitialized: async (
      params: Omit<
        TestContractParamsWithoutMaps<RewardDistributorTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "assertTotalRewardsIsInitialized",
        params,
        getContractByCodeHash
      );
    },
    update: async (
      params: TestContractParamsWithoutMaps<
        RewardDistributorTypes.Fields,
        { array: HexString; index: bigint; value: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "update", params, getContractByCodeHash);
    },
    get: async (
      params: TestContractParamsWithoutMaps<
        RewardDistributorTypes.Fields,
        { array: HexString; index: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "get", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const RewardDistributor = new Factory(
  Contract.fromJson(
    RewardDistributorContractJson,
    "",
    "b913efd25718eeda658a22dfdd9da1d6be770e05b97d607e54ea9f273f724c16",
    []
  )
);

// Use this class to interact with the blockchain
export class RewardDistributorInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<RewardDistributorTypes.State> {
    return fetchContractState(RewardDistributor, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeChangeOwnerCommenceEvent(
    options: EventSubscribeOptions<RewardDistributorTypes.ChangeOwnerCommenceEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      RewardDistributor.contract,
      this,
      options,
      "ChangeOwnerCommence",
      fromCount
    );
  }

  subscribeChangeOwnerApplyEvent(
    options: EventSubscribeOptions<RewardDistributorTypes.ChangeOwnerApplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      RewardDistributor.contract,
      this,
      options,
      "ChangeOwnerApply",
      fromCount
    );
  }

  subscribeMigrateCommenceEvent(
    options: EventSubscribeOptions<RewardDistributorTypes.MigrateCommenceEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      RewardDistributor.contract,
      this,
      options,
      "MigrateCommence",
      fromCount
    );
  }

  subscribeMigrateApplyEvent(
    options: EventSubscribeOptions<RewardDistributorTypes.MigrateApplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      RewardDistributor.contract,
      this,
      options,
      "MigrateApply",
      fromCount
    );
  }

  subscribeMigrateWithFieldsCommenceEvent(
    options: EventSubscribeOptions<RewardDistributorTypes.MigrateWithFieldsCommenceEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      RewardDistributor.contract,
      this,
      options,
      "MigrateWithFieldsCommence",
      fromCount
    );
  }

  subscribeMigrateWithFieldsApplyEvent(
    options: EventSubscribeOptions<RewardDistributorTypes.MigrateWithFieldsApplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      RewardDistributor.contract,
      this,
      options,
      "MigrateWithFieldsApply",
      fromCount
    );
  }

  subscribeEpochChangedEvent(
    options: EventSubscribeOptions<RewardDistributorTypes.EpochChangedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      RewardDistributor.contract,
      this,
      options,
      "EpochChanged",
      fromCount
    );
  }

  subscribeRewardHarvestedEvent(
    options: EventSubscribeOptions<RewardDistributorTypes.RewardHarvestedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      RewardDistributor.contract,
      this,
      options,
      "RewardHarvested",
      fromCount
    );
  }

  subscribeRewardAddedEvent(
    options: EventSubscribeOptions<RewardDistributorTypes.RewardAddedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      RewardDistributor.contract,
      this,
      options,
      "RewardAdded",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | RewardDistributorTypes.ChangeOwnerCommenceEvent
      | RewardDistributorTypes.ChangeOwnerApplyEvent
      | RewardDistributorTypes.MigrateCommenceEvent
      | RewardDistributorTypes.MigrateApplyEvent
      | RewardDistributorTypes.MigrateWithFieldsCommenceEvent
      | RewardDistributorTypes.MigrateWithFieldsApplyEvent
      | RewardDistributorTypes.EpochChangedEvent
      | RewardDistributorTypes.RewardHarvestedEvent
      | RewardDistributorTypes.RewardAddedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      RewardDistributor.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    changeOwner: async (
      params: RewardDistributorTypes.CallMethodParams<"changeOwner">
    ): Promise<RewardDistributorTypes.CallMethodResult<"changeOwner">> => {
      return callMethod(
        RewardDistributor,
        this,
        "changeOwner",
        params,
        getContractByCodeHash
      );
    },
    migrate: async (
      params: RewardDistributorTypes.CallMethodParams<"migrate">
    ): Promise<RewardDistributorTypes.CallMethodResult<"migrate">> => {
      return callMethod(
        RewardDistributor,
        this,
        "migrate",
        params,
        getContractByCodeHash
      );
    },
    migrateWithFields: async (
      params: RewardDistributorTypes.CallMethodParams<"migrateWithFields">
    ): Promise<
      RewardDistributorTypes.CallMethodResult<"migrateWithFields">
    > => {
      return callMethod(
        RewardDistributor,
        this,
        "migrateWithFields",
        params,
        getContractByCodeHash
      );
    },
    changeOwnerApply: async (
      params?: RewardDistributorTypes.CallMethodParams<"changeOwnerApply">
    ): Promise<RewardDistributorTypes.CallMethodResult<"changeOwnerApply">> => {
      return callMethod(
        RewardDistributor,
        this,
        "changeOwnerApply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    migrateApply: async (
      params?: RewardDistributorTypes.CallMethodParams<"migrateApply">
    ): Promise<RewardDistributorTypes.CallMethodResult<"migrateApply">> => {
      return callMethod(
        RewardDistributor,
        this,
        "migrateApply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    migrateWithFieldsApply: async (
      params?: RewardDistributorTypes.CallMethodParams<"migrateWithFieldsApply">
    ): Promise<
      RewardDistributorTypes.CallMethodResult<"migrateWithFieldsApply">
    > => {
      return callMethod(
        RewardDistributor,
        this,
        "migrateWithFieldsApply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    resetUpgrade: async (
      params?: RewardDistributorTypes.CallMethodParams<"resetUpgrade">
    ): Promise<RewardDistributorTypes.CallMethodResult<"resetUpgrade">> => {
      return callMethod(
        RewardDistributor,
        this,
        "resetUpgrade",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getUpgradeDelay: async (
      params?: RewardDistributorTypes.CallMethodParams<"getUpgradeDelay">
    ): Promise<RewardDistributorTypes.CallMethodResult<"getUpgradeDelay">> => {
      return callMethod(
        RewardDistributor,
        this,
        "getUpgradeDelay",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getOwner: async (
      params?: RewardDistributorTypes.CallMethodParams<"getOwner">
    ): Promise<RewardDistributorTypes.CallMethodResult<"getOwner">> => {
      return callMethod(
        RewardDistributor,
        this,
        "getOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewOwner: async (
      params?: RewardDistributorTypes.CallMethodParams<"getNewOwner">
    ): Promise<RewardDistributorTypes.CallMethodResult<"getNewOwner">> => {
      return callMethod(
        RewardDistributor,
        this,
        "getNewOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getUpgradeCommenced: async (
      params?: RewardDistributorTypes.CallMethodParams<"getUpgradeCommenced">
    ): Promise<
      RewardDistributorTypes.CallMethodResult<"getUpgradeCommenced">
    > => {
      return callMethod(
        RewardDistributor,
        this,
        "getUpgradeCommenced",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewCode: async (
      params?: RewardDistributorTypes.CallMethodParams<"getNewCode">
    ): Promise<RewardDistributorTypes.CallMethodResult<"getNewCode">> => {
      return callMethod(
        RewardDistributor,
        this,
        "getNewCode",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewImmFieldsEncoded: async (
      params?: RewardDistributorTypes.CallMethodParams<"getNewImmFieldsEncoded">
    ): Promise<
      RewardDistributorTypes.CallMethodResult<"getNewImmFieldsEncoded">
    > => {
      return callMethod(
        RewardDistributor,
        this,
        "getNewImmFieldsEncoded",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewMutFieldsEncoded: async (
      params?: RewardDistributorTypes.CallMethodParams<"getNewMutFieldsEncoded">
    ): Promise<
      RewardDistributorTypes.CallMethodResult<"getNewMutFieldsEncoded">
    > => {
      return callMethod(
        RewardDistributor,
        this,
        "getNewMutFieldsEncoded",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    harvest: async (
      params?: RewardDistributorTypes.CallMethodParams<"harvest">
    ): Promise<RewardDistributorTypes.CallMethodResult<"harvest">> => {
      return callMethod(
        RewardDistributor,
        this,
        "harvest",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    canHarvest: async (
      params?: RewardDistributorTypes.CallMethodParams<"canHarvest">
    ): Promise<RewardDistributorTypes.CallMethodResult<"canHarvest">> => {
      return callMethod(
        RewardDistributor,
        this,
        "canHarvest",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    addRewards: async (
      params: RewardDistributorTypes.CallMethodParams<"addRewards">
    ): Promise<RewardDistributorTypes.CallMethodResult<"addRewards">> => {
      return callMethod(
        RewardDistributor,
        this,
        "addRewards",
        params,
        getContractByCodeHash
      );
    },
    getTotalPendingRewards: async (
      params?: RewardDistributorTypes.CallMethodParams<"getTotalPendingRewards">
    ): Promise<
      RewardDistributorTypes.CallMethodResult<"getTotalPendingRewards">
    > => {
      return callMethod(
        RewardDistributor,
        this,
        "getTotalPendingRewards",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getCurrentEpoch: async (
      params?: RewardDistributorTypes.CallMethodParams<"getCurrentEpoch">
    ): Promise<RewardDistributorTypes.CallMethodResult<"getCurrentEpoch">> => {
      return callMethod(
        RewardDistributor,
        this,
        "getCurrentEpoch",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getGenesisDate: async (
      params?: RewardDistributorTypes.CallMethodParams<"getGenesisDate">
    ): Promise<RewardDistributorTypes.CallMethodResult<"getGenesisDate">> => {
      return callMethod(
        RewardDistributor,
        this,
        "getGenesisDate",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getEpochDuration: async (
      params?: RewardDistributorTypes.CallMethodParams<"getEpochDuration">
    ): Promise<RewardDistributorTypes.CallMethodResult<"getEpochDuration">> => {
      return callMethod(
        RewardDistributor,
        this,
        "getEpochDuration",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotalEpochs: async (
      params?: RewardDistributorTypes.CallMethodParams<"getTotalEpochs">
    ): Promise<RewardDistributorTypes.CallMethodResult<"getTotalEpochs">> => {
      return callMethod(
        RewardDistributor,
        this,
        "getTotalEpochs",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAccumulatedRewards: async (
      params?: RewardDistributorTypes.CallMethodParams<"getAccumulatedRewards">
    ): Promise<
      RewardDistributorTypes.CallMethodResult<"getAccumulatedRewards">
    > => {
      return callMethod(
        RewardDistributor,
        this,
        "getAccumulatedRewards",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotalRewards: async (
      params?: RewardDistributorTypes.CallMethodParams<"getTotalRewards">
    ): Promise<RewardDistributorTypes.CallMethodResult<"getTotalRewards">> => {
      return callMethod(
        RewardDistributor,
        this,
        "getTotalRewards",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  view = this.methods;

  transact = {
    changeOwner: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"changeOwner">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"changeOwner">
    > => {
      return signExecuteMethod(RewardDistributor, this, "changeOwner", params);
    },
    migrate: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"migrate">
    ): Promise<RewardDistributorTypes.SignExecuteMethodResult<"migrate">> => {
      return signExecuteMethod(RewardDistributor, this, "migrate", params);
    },
    migrateWithFields: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"migrateWithFields">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"migrateWithFields">
    > => {
      return signExecuteMethod(
        RewardDistributor,
        this,
        "migrateWithFields",
        params
      );
    },
    changeOwnerApply: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"changeOwnerApply">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"changeOwnerApply">
    > => {
      return signExecuteMethod(
        RewardDistributor,
        this,
        "changeOwnerApply",
        params
      );
    },
    migrateApply: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"migrateApply">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"migrateApply">
    > => {
      return signExecuteMethod(RewardDistributor, this, "migrateApply", params);
    },
    migrateWithFieldsApply: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"migrateWithFieldsApply">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"migrateWithFieldsApply">
    > => {
      return signExecuteMethod(
        RewardDistributor,
        this,
        "migrateWithFieldsApply",
        params
      );
    },
    resetUpgrade: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"resetUpgrade">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"resetUpgrade">
    > => {
      return signExecuteMethod(RewardDistributor, this, "resetUpgrade", params);
    },
    getUpgradeDelay: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"getUpgradeDelay">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"getUpgradeDelay">
    > => {
      return signExecuteMethod(
        RewardDistributor,
        this,
        "getUpgradeDelay",
        params
      );
    },
    getOwner: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"getOwner">
    ): Promise<RewardDistributorTypes.SignExecuteMethodResult<"getOwner">> => {
      return signExecuteMethod(RewardDistributor, this, "getOwner", params);
    },
    getNewOwner: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"getNewOwner">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"getNewOwner">
    > => {
      return signExecuteMethod(RewardDistributor, this, "getNewOwner", params);
    },
    getUpgradeCommenced: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"getUpgradeCommenced">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"getUpgradeCommenced">
    > => {
      return signExecuteMethod(
        RewardDistributor,
        this,
        "getUpgradeCommenced",
        params
      );
    },
    getNewCode: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"getNewCode">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"getNewCode">
    > => {
      return signExecuteMethod(RewardDistributor, this, "getNewCode", params);
    },
    getNewImmFieldsEncoded: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"getNewImmFieldsEncoded">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"getNewImmFieldsEncoded">
    > => {
      return signExecuteMethod(
        RewardDistributor,
        this,
        "getNewImmFieldsEncoded",
        params
      );
    },
    getNewMutFieldsEncoded: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"getNewMutFieldsEncoded">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"getNewMutFieldsEncoded">
    > => {
      return signExecuteMethod(
        RewardDistributor,
        this,
        "getNewMutFieldsEncoded",
        params
      );
    },
    harvest: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"harvest">
    ): Promise<RewardDistributorTypes.SignExecuteMethodResult<"harvest">> => {
      return signExecuteMethod(RewardDistributor, this, "harvest", params);
    },
    canHarvest: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"canHarvest">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"canHarvest">
    > => {
      return signExecuteMethod(RewardDistributor, this, "canHarvest", params);
    },
    addRewards: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"addRewards">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"addRewards">
    > => {
      return signExecuteMethod(RewardDistributor, this, "addRewards", params);
    },
    getTotalPendingRewards: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"getTotalPendingRewards">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"getTotalPendingRewards">
    > => {
      return signExecuteMethod(
        RewardDistributor,
        this,
        "getTotalPendingRewards",
        params
      );
    },
    getCurrentEpoch: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"getCurrentEpoch">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"getCurrentEpoch">
    > => {
      return signExecuteMethod(
        RewardDistributor,
        this,
        "getCurrentEpoch",
        params
      );
    },
    getGenesisDate: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"getGenesisDate">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"getGenesisDate">
    > => {
      return signExecuteMethod(
        RewardDistributor,
        this,
        "getGenesisDate",
        params
      );
    },
    getEpochDuration: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"getEpochDuration">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"getEpochDuration">
    > => {
      return signExecuteMethod(
        RewardDistributor,
        this,
        "getEpochDuration",
        params
      );
    },
    getTotalEpochs: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"getTotalEpochs">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"getTotalEpochs">
    > => {
      return signExecuteMethod(
        RewardDistributor,
        this,
        "getTotalEpochs",
        params
      );
    },
    getAccumulatedRewards: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"getAccumulatedRewards">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"getAccumulatedRewards">
    > => {
      return signExecuteMethod(
        RewardDistributor,
        this,
        "getAccumulatedRewards",
        params
      );
    },
    getTotalRewards: async (
      params: RewardDistributorTypes.SignExecuteMethodParams<"getTotalRewards">
    ): Promise<
      RewardDistributorTypes.SignExecuteMethodResult<"getTotalRewards">
    > => {
      return signExecuteMethod(
        RewardDistributor,
        this,
        "getTotalRewards",
        params
      );
    },
  };

  async multicall<Calls extends RewardDistributorTypes.MultiCallParams>(
    calls: Calls
  ): Promise<RewardDistributorTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      RewardDistributor,
      this,
      calls,
      getContractByCodeHash
    )) as RewardDistributorTypes.MultiCallResults<Calls>;
  }
}
