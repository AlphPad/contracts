/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as SaleManagerV3ContractJson } from "../launch_sale_v3/SaleManagerV3.ral.json";
import { getContractByCodeHash } from "./contracts";
import { ListingRecord, AllStructs } from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace SaleManagerV3Types {
  export type Fields = {
    rewardDistributor: HexString;
    alphTokenId: HexString;
    listingFeeAmount: bigint;
    upgradeDelay: bigint;
    saleFlatPriceAlphTemplateId: HexString;
    accountTemplateId: HexString;
    saleCounter: bigint;
    listingCounter: bigint;
    listingsReviewer: Address;
    owner: Address;
    newOwner: Address;
    upgradeCommenced: bigint;
    newCode: HexString;
    newImmFieldsEncoded: HexString;
    newMutFieldsEncoded: HexString;
  };

  export type State = ContractState<Fields>;

  export type ChangeOwnerCommenceEvent = ContractEvent<{
    owner: Address;
    changeOwner: Address;
  }>;
  export type ChangeOwnerApplyEvent = ContractEvent<{
    owner: Address;
    changeOwner: Address;
  }>;
  export type MigrateCommenceEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
  }>;
  export type MigrateApplyEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
  }>;
  export type MigrateWithFieldsCommenceEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
    changeImmFieldsEncoded: HexString;
    changeMutFieldsEncoded: HexString;
  }>;
  export type MigrateWithFieldsApplyEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
    changeImmFieldsEncoded: HexString;
    changeMutFieldsEncoded: HexString;
  }>;
  export type CreateSaleFlatPriceAlphEvent = ContractEvent<{
    account: Address;
    saleIndex: bigint;
    contractId: HexString;
  }>;
  export type CreateListingRecordEvent = ContractEvent<{
    caller: Address;
    listingIndex: bigint;
  }>;
  export type UpdateListingContractIdEvent = ContractEvent<{
    caller: Address;
    listingIndex: bigint;
    contractId: HexString;
  }>;
  export type UpdateListingStatusEvent = ContractEvent<{
    caller: Address;
    listingIndex: bigint;
    newStatus: HexString;
  }>;
  export type UpdateListingReviewerEvent = ContractEvent<{
    caller: Address;
    newListingsReviewer: Address;
  }>;

  export interface CallMethodTable {
    changeOwner: {
      params: CallContractParams<{ changeOwner: Address }>;
      result: CallContractResult<null>;
    };
    migrate: {
      params: CallContractParams<{ changeCode: HexString }>;
      result: CallContractResult<null>;
    };
    migrateWithFields: {
      params: CallContractParams<{
        changeCode: HexString;
        changeImmFieldsEncoded: HexString;
        changeMutFieldsEncoded: HexString;
      }>;
      result: CallContractResult<null>;
    };
    changeOwnerApply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    migrateApply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    migrateWithFieldsApply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    resetUpgrade: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    getUpgradeDelay: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getNewOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getUpgradeCommenced: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getNewCode: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getNewImmFieldsEncoded: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getNewMutFieldsEncoded: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    createListingRecord: {
      params: CallContractParams<{ amountAlph: bigint }>;
      result: CallContractResult<null>;
    };
    updateListingStatus: {
      params: CallContractParams<{
        listingRecordIndex: bigint;
        newStatus: HexString;
      }>;
      result: CallContractResult<null>;
    };
    getListing: {
      params: CallContractParams<{ listingRecordIndex: bigint }>;
      result: CallContractResult<ListingRecord>;
    };
    changeListingReviewer: {
      params: CallContractParams<{ newListingsReviewer: Address }>;
      result: CallContractResult<null>;
    };
    createSaleFlatPriceAlph: {
      params: CallContractParams<{
        listingRecordIndex: bigint;
        tokenPrice: bigint;
        publicSaleMaxBid: bigint;
        upfrontRelease: bigint;
        vestingEnd: bigint;
        cliffEnd: bigint;
        saleStart: bigint;
        saleEnd: bigint;
        minRaise: bigint;
        maxRaise: bigint;
        saleTokenId: HexString;
        saleTokenTotalAmount: bigint;
        whitelistSaleEnd: bigint;
        merkleRoot: HexString;
      }>;
      result: CallContractResult<null>;
    };
    calculateListingFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> =
    Callss["length"] extends 1
      ? MultiCallResults<Callss[0]>
      : { [index in keyof Callss]: MultiCallResults<Callss[index]> };

  export interface SignExecuteMethodTable {
    changeOwner: {
      params: SignExecuteContractMethodParams<{ changeOwner: Address }>;
      result: SignExecuteScriptTxResult;
    };
    migrate: {
      params: SignExecuteContractMethodParams<{ changeCode: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    migrateWithFields: {
      params: SignExecuteContractMethodParams<{
        changeCode: HexString;
        changeImmFieldsEncoded: HexString;
        changeMutFieldsEncoded: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    changeOwnerApply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    migrateApply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    migrateWithFieldsApply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    resetUpgrade: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getUpgradeDelay: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getOwner: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewOwner: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getUpgradeCommenced: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewCode: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewImmFieldsEncoded: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewMutFieldsEncoded: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    createListingRecord: {
      params: SignExecuteContractMethodParams<{ amountAlph: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    updateListingStatus: {
      params: SignExecuteContractMethodParams<{
        listingRecordIndex: bigint;
        newStatus: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getListing: {
      params: SignExecuteContractMethodParams<{ listingRecordIndex: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    changeListingReviewer: {
      params: SignExecuteContractMethodParams<{ newListingsReviewer: Address }>;
      result: SignExecuteScriptTxResult;
    };
    createSaleFlatPriceAlph: {
      params: SignExecuteContractMethodParams<{
        listingRecordIndex: bigint;
        tokenPrice: bigint;
        publicSaleMaxBid: bigint;
        upfrontRelease: bigint;
        vestingEnd: bigint;
        cliffEnd: bigint;
        saleStart: bigint;
        saleEnd: bigint;
        minRaise: bigint;
        maxRaise: bigint;
        saleTokenId: HexString;
        saleTokenTotalAmount: bigint;
        whitelistSaleEnd: bigint;
        merkleRoot: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    calculateListingFee: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  SaleManagerV3Instance,
  SaleManagerV3Types.Fields
> {
  encodeFields(fields: SaleManagerV3Types.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = {
    ChangeOwnerCommence: 0,
    ChangeOwnerApply: 1,
    MigrateCommence: 2,
    MigrateApply: 3,
    MigrateWithFieldsCommence: 4,
    MigrateWithFieldsApply: 5,
    CreateSaleFlatPriceAlph: 6,
    CreateListingRecord: 7,
    UpdateListingContractId: 8,
    UpdateListingStatus: 9,
    UpdateListingReviewer: 10,
  };
  consts = {
    UpgradeErrorCodes: {
      Forbidden: BigInt("13000"),
      UpgradePending: BigInt("13001"),
      UpgradeNotPending: BigInt("13002"),
      UpgradeDelayNotExpired: BigInt("13003"),
      MigrateNotPending: BigInt("13004"),
      MigrateWithFieldsNotPending: BigInt("13005"),
      ChangeOwnerNotPending: BigInt("13006"),
    },
    ErrorCodes: {
      ListingFeeMustBePaid: BigInt("501"),
      PriceLargerThanMax: BigInt("502"),
      PriceSmallerThanMin: BigInt("503"),
      RaiseLargerThanMax: BigInt("504"),
      RaiseSmallerThanMin: BigInt("505"),
      SaleStartMustBeInFuture: BigInt("506"),
      SaleEndMustBeAfterSaleStart: BigInt("507"),
      SaleAmountSmallerThanMin: BigInt("508"),
      SaleAmountLargerThanMax: BigInt("509"),
      WLSaleEndMustBeWithinSaleDatesAndAfterWLSaleStart: BigInt("511"),
      WLSaleInvalidMerkleRootSize: BigInt("514"),
      WLSaleMerkleRootMustNotBeZeroes: BigInt("515"),
      CliffEndOutOfRange: BigInt("517"),
      UpfrontReleaseOutOfRange: BigInt("518"),
      VestingEndOutOfRange: BigInt("519"),
      PublicSaleMaxBidMinimum: BigInt("520"),
      Unauthorized: BigInt("521"),
      ListingDoesntExist: BigInt("522"),
    },
  };

  at(address: string): SaleManagerV3Instance {
    return new SaleManagerV3Instance(address);
  }

  tests = {
    changeOwner: async (
      params: TestContractParams<
        SaleManagerV3Types.Fields,
        { changeOwner: Address },
        { listings?: Map<bigint, ListingRecord> }
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(this, "changeOwner", params, getContractByCodeHash);
    },
    migrate: async (
      params: TestContractParams<
        SaleManagerV3Types.Fields,
        { changeCode: HexString },
        { listings?: Map<bigint, ListingRecord> }
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(this, "migrate", params, getContractByCodeHash);
    },
    migrateWithFields: async (
      params: TestContractParams<
        SaleManagerV3Types.Fields,
        {
          changeCode: HexString;
          changeImmFieldsEncoded: HexString;
          changeMutFieldsEncoded: HexString;
        },
        { listings?: Map<bigint, ListingRecord> }
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(
        this,
        "migrateWithFields",
        params,
        getContractByCodeHash
      );
    },
    changeOwnerApply: async (
      params: Omit<
        TestContractParams<
          SaleManagerV3Types.Fields,
          never,
          { listings?: Map<bigint, ListingRecord> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(
        this,
        "changeOwnerApply",
        params,
        getContractByCodeHash
      );
    },
    migrateApply: async (
      params: Omit<
        TestContractParams<
          SaleManagerV3Types.Fields,
          never,
          { listings?: Map<bigint, ListingRecord> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(this, "migrateApply", params, getContractByCodeHash);
    },
    migrateWithFieldsApply: async (
      params: Omit<
        TestContractParams<
          SaleManagerV3Types.Fields,
          never,
          { listings?: Map<bigint, ListingRecord> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(
        this,
        "migrateWithFieldsApply",
        params,
        getContractByCodeHash
      );
    },
    resetUpgrade: async (
      params: Omit<
        TestContractParams<
          SaleManagerV3Types.Fields,
          never,
          { listings?: Map<bigint, ListingRecord> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(this, "resetUpgrade", params, getContractByCodeHash);
    },
    getUpgradeDelay: async (
      params: Omit<
        TestContractParams<
          SaleManagerV3Types.Fields,
          never,
          { listings?: Map<bigint, ListingRecord> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<bigint, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(this, "getUpgradeDelay", params, getContractByCodeHash);
    },
    getOwner: async (
      params: Omit<
        TestContractParams<
          SaleManagerV3Types.Fields,
          never,
          { listings?: Map<bigint, ListingRecord> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<Address, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(this, "getOwner", params, getContractByCodeHash);
    },
    getNewOwner: async (
      params: Omit<
        TestContractParams<
          SaleManagerV3Types.Fields,
          never,
          { listings?: Map<bigint, ListingRecord> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<Address, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(this, "getNewOwner", params, getContractByCodeHash);
    },
    getUpgradeCommenced: async (
      params: Omit<
        TestContractParams<
          SaleManagerV3Types.Fields,
          never,
          { listings?: Map<bigint, ListingRecord> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<bigint, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(
        this,
        "getUpgradeCommenced",
        params,
        getContractByCodeHash
      );
    },
    getNewCode: async (
      params: Omit<
        TestContractParams<
          SaleManagerV3Types.Fields,
          never,
          { listings?: Map<bigint, ListingRecord> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<HexString, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(this, "getNewCode", params, getContractByCodeHash);
    },
    getNewImmFieldsEncoded: async (
      params: Omit<
        TestContractParams<
          SaleManagerV3Types.Fields,
          never,
          { listings?: Map<bigint, ListingRecord> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<HexString, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(
        this,
        "getNewImmFieldsEncoded",
        params,
        getContractByCodeHash
      );
    },
    getNewMutFieldsEncoded: async (
      params: Omit<
        TestContractParams<
          SaleManagerV3Types.Fields,
          never,
          { listings?: Map<bigint, ListingRecord> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<HexString, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(
        this,
        "getNewMutFieldsEncoded",
        params,
        getContractByCodeHash
      );
    },
    resetFields: async (
      params: Omit<
        TestContractParams<
          SaleManagerV3Types.Fields,
          never,
          { listings?: Map<bigint, ListingRecord> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(this, "resetFields", params, getContractByCodeHash);
    },
    assertOnlyOwner: async (
      params: TestContractParams<
        SaleManagerV3Types.Fields,
        { caller: Address },
        { listings?: Map<bigint, ListingRecord> }
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(this, "assertOnlyOwner", params, getContractByCodeHash);
    },
    assertUpgradeNotPending: async (
      params: Omit<
        TestContractParams<
          SaleManagerV3Types.Fields,
          never,
          { listings?: Map<bigint, ListingRecord> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(
        this,
        "assertUpgradeNotPending",
        params,
        getContractByCodeHash
      );
    },
    assertUpgradeDelayElapsed: async (
      params: Omit<
        TestContractParams<
          SaleManagerV3Types.Fields,
          never,
          { listings?: Map<bigint, ListingRecord> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(
        this,
        "assertUpgradeDelayElapsed",
        params,
        getContractByCodeHash
      );
    },
    createListingRecord: async (
      params: TestContractParams<
        SaleManagerV3Types.Fields,
        { amountAlph: bigint },
        { listings?: Map<bigint, ListingRecord> }
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(
        this,
        "createListingRecord",
        params,
        getContractByCodeHash
      );
    },
    updateListingStatus: async (
      params: TestContractParams<
        SaleManagerV3Types.Fields,
        { listingRecordIndex: bigint; newStatus: HexString },
        { listings?: Map<bigint, ListingRecord> }
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(
        this,
        "updateListingStatus",
        params,
        getContractByCodeHash
      );
    },
    getListing: async (
      params: TestContractParams<
        SaleManagerV3Types.Fields,
        { listingRecordIndex: bigint },
        { listings?: Map<bigint, ListingRecord> }
      >
    ): Promise<
      TestContractResult<
        ListingRecord,
        { listings?: Map<bigint, ListingRecord> }
      >
    > => {
      return testMethod(this, "getListing", params, getContractByCodeHash);
    },
    changeListingReviewer: async (
      params: TestContractParams<
        SaleManagerV3Types.Fields,
        { newListingsReviewer: Address },
        { listings?: Map<bigint, ListingRecord> }
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(
        this,
        "changeListingReviewer",
        params,
        getContractByCodeHash
      );
    },
    createSaleFlatPriceAlph: async (
      params: TestContractParams<
        SaleManagerV3Types.Fields,
        {
          listingRecordIndex: bigint;
          tokenPrice: bigint;
          publicSaleMaxBid: bigint;
          upfrontRelease: bigint;
          vestingEnd: bigint;
          cliffEnd: bigint;
          saleStart: bigint;
          saleEnd: bigint;
          minRaise: bigint;
          maxRaise: bigint;
          saleTokenId: HexString;
          saleTokenTotalAmount: bigint;
          whitelistSaleEnd: bigint;
          merkleRoot: HexString;
        },
        { listings?: Map<bigint, ListingRecord> }
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(
        this,
        "createSaleFlatPriceAlph",
        params,
        getContractByCodeHash
      );
    },
    calculateListingFee: async (
      params: Omit<
        TestContractParams<
          SaleManagerV3Types.Fields,
          never,
          { listings?: Map<bigint, ListingRecord> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<bigint, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(
        this,
        "calculateListingFee",
        params,
        getContractByCodeHash
      );
    },
    assertPriceInRange: async (
      params: TestContractParams<
        SaleManagerV3Types.Fields,
        { tokenPrice: bigint },
        { listings?: Map<bigint, ListingRecord> }
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(
        this,
        "assertPriceInRange",
        params,
        getContractByCodeHash
      );
    },
    assertAlphAmountInRange: async (
      params: TestContractParams<
        SaleManagerV3Types.Fields,
        { alphAmount: bigint },
        { listings?: Map<bigint, ListingRecord> }
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(
        this,
        "assertAlphAmountInRange",
        params,
        getContractByCodeHash
      );
    },
    assertSaleAmountInRange: async (
      params: TestContractParams<
        SaleManagerV3Types.Fields,
        { saleAmount: bigint },
        { listings?: Map<bigint, ListingRecord> }
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(
        this,
        "assertSaleAmountInRange",
        params,
        getContractByCodeHash
      );
    },
    assertSaleDates: async (
      params: TestContractParams<
        SaleManagerV3Types.Fields,
        { saleStart: bigint; saleEnd: bigint },
        { listings?: Map<bigint, ListingRecord> }
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(this, "assertSaleDates", params, getContractByCodeHash);
    },
    assertListingFeePaid: async (
      params: TestContractParams<
        SaleManagerV3Types.Fields,
        { amountAlph: bigint },
        { listings?: Map<bigint, ListingRecord> }
      >
    ): Promise<
      TestContractResult<null, { listings?: Map<bigint, ListingRecord> }>
    > => {
      return testMethod(
        this,
        "assertListingFeePaid",
        params,
        getContractByCodeHash
      );
    },
  };
}

// Use this object to test and deploy the contract
export const SaleManagerV3 = new Factory(
  Contract.fromJson(
    SaleManagerV3ContractJson,
    "=78-2+3e=2-6+da=3-1=2-2+3=1+6=1-2+4b2=3-1+8=2+e4450=1-1=2-1=1+b=2+4=1-1=2-2+68=927-1+a=136+7a7e0214696e73657274206174206d617020706174683a2000=1654",
    "d36b0a881fce27ab1dc62a7b4676a88d14f4e2c2ae0663829c9af56c072a522d",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class SaleManagerV3Instance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    listings: new RalphMap<bigint, ListingRecord>(
      SaleManagerV3.contract,
      this.contractId,
      "listings"
    ),
  };

  async fetchState(): Promise<SaleManagerV3Types.State> {
    return fetchContractState(SaleManagerV3, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeChangeOwnerCommenceEvent(
    options: EventSubscribeOptions<SaleManagerV3Types.ChangeOwnerCommenceEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SaleManagerV3.contract,
      this,
      options,
      "ChangeOwnerCommence",
      fromCount
    );
  }

  subscribeChangeOwnerApplyEvent(
    options: EventSubscribeOptions<SaleManagerV3Types.ChangeOwnerApplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SaleManagerV3.contract,
      this,
      options,
      "ChangeOwnerApply",
      fromCount
    );
  }

  subscribeMigrateCommenceEvent(
    options: EventSubscribeOptions<SaleManagerV3Types.MigrateCommenceEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SaleManagerV3.contract,
      this,
      options,
      "MigrateCommence",
      fromCount
    );
  }

  subscribeMigrateApplyEvent(
    options: EventSubscribeOptions<SaleManagerV3Types.MigrateApplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SaleManagerV3.contract,
      this,
      options,
      "MigrateApply",
      fromCount
    );
  }

  subscribeMigrateWithFieldsCommenceEvent(
    options: EventSubscribeOptions<SaleManagerV3Types.MigrateWithFieldsCommenceEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SaleManagerV3.contract,
      this,
      options,
      "MigrateWithFieldsCommence",
      fromCount
    );
  }

  subscribeMigrateWithFieldsApplyEvent(
    options: EventSubscribeOptions<SaleManagerV3Types.MigrateWithFieldsApplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SaleManagerV3.contract,
      this,
      options,
      "MigrateWithFieldsApply",
      fromCount
    );
  }

  subscribeCreateSaleFlatPriceAlphEvent(
    options: EventSubscribeOptions<SaleManagerV3Types.CreateSaleFlatPriceAlphEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SaleManagerV3.contract,
      this,
      options,
      "CreateSaleFlatPriceAlph",
      fromCount
    );
  }

  subscribeCreateListingRecordEvent(
    options: EventSubscribeOptions<SaleManagerV3Types.CreateListingRecordEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SaleManagerV3.contract,
      this,
      options,
      "CreateListingRecord",
      fromCount
    );
  }

  subscribeUpdateListingContractIdEvent(
    options: EventSubscribeOptions<SaleManagerV3Types.UpdateListingContractIdEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SaleManagerV3.contract,
      this,
      options,
      "UpdateListingContractId",
      fromCount
    );
  }

  subscribeUpdateListingStatusEvent(
    options: EventSubscribeOptions<SaleManagerV3Types.UpdateListingStatusEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SaleManagerV3.contract,
      this,
      options,
      "UpdateListingStatus",
      fromCount
    );
  }

  subscribeUpdateListingReviewerEvent(
    options: EventSubscribeOptions<SaleManagerV3Types.UpdateListingReviewerEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SaleManagerV3.contract,
      this,
      options,
      "UpdateListingReviewer",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | SaleManagerV3Types.ChangeOwnerCommenceEvent
      | SaleManagerV3Types.ChangeOwnerApplyEvent
      | SaleManagerV3Types.MigrateCommenceEvent
      | SaleManagerV3Types.MigrateApplyEvent
      | SaleManagerV3Types.MigrateWithFieldsCommenceEvent
      | SaleManagerV3Types.MigrateWithFieldsApplyEvent
      | SaleManagerV3Types.CreateSaleFlatPriceAlphEvent
      | SaleManagerV3Types.CreateListingRecordEvent
      | SaleManagerV3Types.UpdateListingContractIdEvent
      | SaleManagerV3Types.UpdateListingStatusEvent
      | SaleManagerV3Types.UpdateListingReviewerEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      SaleManagerV3.contract,
      this,
      options,
      fromCount
    );
  }

  view = {
    changeOwner: async (
      params: SaleManagerV3Types.CallMethodParams<"changeOwner">
    ): Promise<SaleManagerV3Types.CallMethodResult<"changeOwner">> => {
      return callMethod(
        SaleManagerV3,
        this,
        "changeOwner",
        params,
        getContractByCodeHash
      );
    },
    migrate: async (
      params: SaleManagerV3Types.CallMethodParams<"migrate">
    ): Promise<SaleManagerV3Types.CallMethodResult<"migrate">> => {
      return callMethod(
        SaleManagerV3,
        this,
        "migrate",
        params,
        getContractByCodeHash
      );
    },
    migrateWithFields: async (
      params: SaleManagerV3Types.CallMethodParams<"migrateWithFields">
    ): Promise<SaleManagerV3Types.CallMethodResult<"migrateWithFields">> => {
      return callMethod(
        SaleManagerV3,
        this,
        "migrateWithFields",
        params,
        getContractByCodeHash
      );
    },
    changeOwnerApply: async (
      params?: SaleManagerV3Types.CallMethodParams<"changeOwnerApply">
    ): Promise<SaleManagerV3Types.CallMethodResult<"changeOwnerApply">> => {
      return callMethod(
        SaleManagerV3,
        this,
        "changeOwnerApply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    migrateApply: async (
      params?: SaleManagerV3Types.CallMethodParams<"migrateApply">
    ): Promise<SaleManagerV3Types.CallMethodResult<"migrateApply">> => {
      return callMethod(
        SaleManagerV3,
        this,
        "migrateApply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    migrateWithFieldsApply: async (
      params?: SaleManagerV3Types.CallMethodParams<"migrateWithFieldsApply">
    ): Promise<
      SaleManagerV3Types.CallMethodResult<"migrateWithFieldsApply">
    > => {
      return callMethod(
        SaleManagerV3,
        this,
        "migrateWithFieldsApply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    resetUpgrade: async (
      params?: SaleManagerV3Types.CallMethodParams<"resetUpgrade">
    ): Promise<SaleManagerV3Types.CallMethodResult<"resetUpgrade">> => {
      return callMethod(
        SaleManagerV3,
        this,
        "resetUpgrade",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getUpgradeDelay: async (
      params?: SaleManagerV3Types.CallMethodParams<"getUpgradeDelay">
    ): Promise<SaleManagerV3Types.CallMethodResult<"getUpgradeDelay">> => {
      return callMethod(
        SaleManagerV3,
        this,
        "getUpgradeDelay",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getOwner: async (
      params?: SaleManagerV3Types.CallMethodParams<"getOwner">
    ): Promise<SaleManagerV3Types.CallMethodResult<"getOwner">> => {
      return callMethod(
        SaleManagerV3,
        this,
        "getOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewOwner: async (
      params?: SaleManagerV3Types.CallMethodParams<"getNewOwner">
    ): Promise<SaleManagerV3Types.CallMethodResult<"getNewOwner">> => {
      return callMethod(
        SaleManagerV3,
        this,
        "getNewOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getUpgradeCommenced: async (
      params?: SaleManagerV3Types.CallMethodParams<"getUpgradeCommenced">
    ): Promise<SaleManagerV3Types.CallMethodResult<"getUpgradeCommenced">> => {
      return callMethod(
        SaleManagerV3,
        this,
        "getUpgradeCommenced",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewCode: async (
      params?: SaleManagerV3Types.CallMethodParams<"getNewCode">
    ): Promise<SaleManagerV3Types.CallMethodResult<"getNewCode">> => {
      return callMethod(
        SaleManagerV3,
        this,
        "getNewCode",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewImmFieldsEncoded: async (
      params?: SaleManagerV3Types.CallMethodParams<"getNewImmFieldsEncoded">
    ): Promise<
      SaleManagerV3Types.CallMethodResult<"getNewImmFieldsEncoded">
    > => {
      return callMethod(
        SaleManagerV3,
        this,
        "getNewImmFieldsEncoded",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewMutFieldsEncoded: async (
      params?: SaleManagerV3Types.CallMethodParams<"getNewMutFieldsEncoded">
    ): Promise<
      SaleManagerV3Types.CallMethodResult<"getNewMutFieldsEncoded">
    > => {
      return callMethod(
        SaleManagerV3,
        this,
        "getNewMutFieldsEncoded",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    createListingRecord: async (
      params: SaleManagerV3Types.CallMethodParams<"createListingRecord">
    ): Promise<SaleManagerV3Types.CallMethodResult<"createListingRecord">> => {
      return callMethod(
        SaleManagerV3,
        this,
        "createListingRecord",
        params,
        getContractByCodeHash
      );
    },
    updateListingStatus: async (
      params: SaleManagerV3Types.CallMethodParams<"updateListingStatus">
    ): Promise<SaleManagerV3Types.CallMethodResult<"updateListingStatus">> => {
      return callMethod(
        SaleManagerV3,
        this,
        "updateListingStatus",
        params,
        getContractByCodeHash
      );
    },
    getListing: async (
      params: SaleManagerV3Types.CallMethodParams<"getListing">
    ): Promise<SaleManagerV3Types.CallMethodResult<"getListing">> => {
      return callMethod(
        SaleManagerV3,
        this,
        "getListing",
        params,
        getContractByCodeHash
      );
    },
    changeListingReviewer: async (
      params: SaleManagerV3Types.CallMethodParams<"changeListingReviewer">
    ): Promise<
      SaleManagerV3Types.CallMethodResult<"changeListingReviewer">
    > => {
      return callMethod(
        SaleManagerV3,
        this,
        "changeListingReviewer",
        params,
        getContractByCodeHash
      );
    },
    createSaleFlatPriceAlph: async (
      params: SaleManagerV3Types.CallMethodParams<"createSaleFlatPriceAlph">
    ): Promise<
      SaleManagerV3Types.CallMethodResult<"createSaleFlatPriceAlph">
    > => {
      return callMethod(
        SaleManagerV3,
        this,
        "createSaleFlatPriceAlph",
        params,
        getContractByCodeHash
      );
    },
    calculateListingFee: async (
      params?: SaleManagerV3Types.CallMethodParams<"calculateListingFee">
    ): Promise<SaleManagerV3Types.CallMethodResult<"calculateListingFee">> => {
      return callMethod(
        SaleManagerV3,
        this,
        "calculateListingFee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    changeOwner: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"changeOwner">
    ): Promise<SaleManagerV3Types.SignExecuteMethodResult<"changeOwner">> => {
      return signExecuteMethod(SaleManagerV3, this, "changeOwner", params);
    },
    migrate: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"migrate">
    ): Promise<SaleManagerV3Types.SignExecuteMethodResult<"migrate">> => {
      return signExecuteMethod(SaleManagerV3, this, "migrate", params);
    },
    migrateWithFields: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"migrateWithFields">
    ): Promise<
      SaleManagerV3Types.SignExecuteMethodResult<"migrateWithFields">
    > => {
      return signExecuteMethod(
        SaleManagerV3,
        this,
        "migrateWithFields",
        params
      );
    },
    changeOwnerApply: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"changeOwnerApply">
    ): Promise<
      SaleManagerV3Types.SignExecuteMethodResult<"changeOwnerApply">
    > => {
      return signExecuteMethod(SaleManagerV3, this, "changeOwnerApply", params);
    },
    migrateApply: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"migrateApply">
    ): Promise<SaleManagerV3Types.SignExecuteMethodResult<"migrateApply">> => {
      return signExecuteMethod(SaleManagerV3, this, "migrateApply", params);
    },
    migrateWithFieldsApply: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"migrateWithFieldsApply">
    ): Promise<
      SaleManagerV3Types.SignExecuteMethodResult<"migrateWithFieldsApply">
    > => {
      return signExecuteMethod(
        SaleManagerV3,
        this,
        "migrateWithFieldsApply",
        params
      );
    },
    resetUpgrade: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"resetUpgrade">
    ): Promise<SaleManagerV3Types.SignExecuteMethodResult<"resetUpgrade">> => {
      return signExecuteMethod(SaleManagerV3, this, "resetUpgrade", params);
    },
    getUpgradeDelay: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"getUpgradeDelay">
    ): Promise<
      SaleManagerV3Types.SignExecuteMethodResult<"getUpgradeDelay">
    > => {
      return signExecuteMethod(SaleManagerV3, this, "getUpgradeDelay", params);
    },
    getOwner: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"getOwner">
    ): Promise<SaleManagerV3Types.SignExecuteMethodResult<"getOwner">> => {
      return signExecuteMethod(SaleManagerV3, this, "getOwner", params);
    },
    getNewOwner: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"getNewOwner">
    ): Promise<SaleManagerV3Types.SignExecuteMethodResult<"getNewOwner">> => {
      return signExecuteMethod(SaleManagerV3, this, "getNewOwner", params);
    },
    getUpgradeCommenced: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"getUpgradeCommenced">
    ): Promise<
      SaleManagerV3Types.SignExecuteMethodResult<"getUpgradeCommenced">
    > => {
      return signExecuteMethod(
        SaleManagerV3,
        this,
        "getUpgradeCommenced",
        params
      );
    },
    getNewCode: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"getNewCode">
    ): Promise<SaleManagerV3Types.SignExecuteMethodResult<"getNewCode">> => {
      return signExecuteMethod(SaleManagerV3, this, "getNewCode", params);
    },
    getNewImmFieldsEncoded: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"getNewImmFieldsEncoded">
    ): Promise<
      SaleManagerV3Types.SignExecuteMethodResult<"getNewImmFieldsEncoded">
    > => {
      return signExecuteMethod(
        SaleManagerV3,
        this,
        "getNewImmFieldsEncoded",
        params
      );
    },
    getNewMutFieldsEncoded: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"getNewMutFieldsEncoded">
    ): Promise<
      SaleManagerV3Types.SignExecuteMethodResult<"getNewMutFieldsEncoded">
    > => {
      return signExecuteMethod(
        SaleManagerV3,
        this,
        "getNewMutFieldsEncoded",
        params
      );
    },
    createListingRecord: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"createListingRecord">
    ): Promise<
      SaleManagerV3Types.SignExecuteMethodResult<"createListingRecord">
    > => {
      return signExecuteMethod(
        SaleManagerV3,
        this,
        "createListingRecord",
        params
      );
    },
    updateListingStatus: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"updateListingStatus">
    ): Promise<
      SaleManagerV3Types.SignExecuteMethodResult<"updateListingStatus">
    > => {
      return signExecuteMethod(
        SaleManagerV3,
        this,
        "updateListingStatus",
        params
      );
    },
    getListing: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"getListing">
    ): Promise<SaleManagerV3Types.SignExecuteMethodResult<"getListing">> => {
      return signExecuteMethod(SaleManagerV3, this, "getListing", params);
    },
    changeListingReviewer: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"changeListingReviewer">
    ): Promise<
      SaleManagerV3Types.SignExecuteMethodResult<"changeListingReviewer">
    > => {
      return signExecuteMethod(
        SaleManagerV3,
        this,
        "changeListingReviewer",
        params
      );
    },
    createSaleFlatPriceAlph: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"createSaleFlatPriceAlph">
    ): Promise<
      SaleManagerV3Types.SignExecuteMethodResult<"createSaleFlatPriceAlph">
    > => {
      return signExecuteMethod(
        SaleManagerV3,
        this,
        "createSaleFlatPriceAlph",
        params
      );
    },
    calculateListingFee: async (
      params: SaleManagerV3Types.SignExecuteMethodParams<"calculateListingFee">
    ): Promise<
      SaleManagerV3Types.SignExecuteMethodResult<"calculateListingFee">
    > => {
      return signExecuteMethod(
        SaleManagerV3,
        this,
        "calculateListingFee",
        params
      );
    },
  };

  async multicall<Callss extends SaleManagerV3Types.MultiCallParams[]>(
    ...callss: Callss
  ): Promise<SaleManagerV3Types.MulticallReturnType<Callss>> {
    return (await multicallMethods(
      SaleManagerV3,
      this,
      callss,
      getContractByCodeHash
    )) as SaleManagerV3Types.MulticallReturnType<Callss>;
  }
}
