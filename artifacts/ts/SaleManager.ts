/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
} from "@alephium/web3";
import { default as SaleManagerContractJson } from "../launch_sale/SaleManager.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace SaleManagerTypes {
  export type Fields = {
    burnAlphContract: HexString;
    rewardDistributor: HexString;
    pair: HexString;
    alphTokenId: HexString;
    usdtTokenId: HexString;
    listingFeeAmount: bigint;
    upgradeDelay: bigint;
    saleFlatPriceAlphTemplateId: HexString;
    accountTemplateId: HexString;
    saleCounter: bigint;
    owner: Address;
    newOwner: Address;
    upgradeCommenced: bigint;
    newCode: HexString;
    newImmFieldsEncoded: HexString;
    newMutFieldsEncoded: HexString;
  };

  export type State = ContractState<Fields>;

  export type ChangeOwnerCommenceEvent = ContractEvent<{
    owner: Address;
    changeOwner: Address;
  }>;
  export type ChangeOwnerApplyEvent = ContractEvent<{
    owner: Address;
    changeOwner: Address;
  }>;
  export type MigrateCommenceEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
  }>;
  export type MigrateApplyEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
  }>;
  export type MigrateWithFieldsCommenceEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
    changeImmFieldsEncoded: HexString;
    changeMutFieldsEncoded: HexString;
  }>;
  export type MigrateWithFieldsApplyEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
    changeImmFieldsEncoded: HexString;
    changeMutFieldsEncoded: HexString;
  }>;
  export type CreateSaleFlatPriceAlphEvent = ContractEvent<{
    account: Address;
    saleIndex: bigint;
    contractId: HexString;
  }>;

  export interface CallMethodTable {
    getUpgradeDelay: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getNewOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getUpgradeCommenced: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getNewCode: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getNewImmFieldsEncoded: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getNewMutFieldsEncoded: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    calculateListingFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  SaleManagerInstance,
  SaleManagerTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as SaleManagerTypes.Fields;
  }

  eventIndex = {
    ChangeOwnerCommence: 0,
    ChangeOwnerApply: 1,
    MigrateCommence: 2,
    MigrateApply: 3,
    MigrateWithFieldsCommence: 4,
    MigrateWithFieldsApply: 5,
    CreateSaleFlatPriceAlph: 6,
  };
  consts = {
    UpgradeErrorCodes: {
      Forbidden: BigInt(13000),
      UpgradePending: BigInt(13001),
      UpgradeNotPending: BigInt(13002),
      UpgradeDelayNotExpired: BigInt(13003),
      MigrateNotPending: BigInt(13004),
      MigrateWithFieldsNotPending: BigInt(13005),
      ChangeOwnerNotPending: BigInt(13006),
    },
    ErrorCodes: {
      ListingFeeMustBePaid: BigInt(501),
      PriceLargerThanMax: BigInt(502),
      PriceSmallerThanMin: BigInt(503),
      RaiseLargerThanMax: BigInt(504),
      RaiseSmallerThanMin: BigInt(505),
      SaleStartMustBeInFuture: BigInt(506),
      SaleEndMustBeAfterSaleStart: BigInt(507),
      SaleAmountSmallerThanMin: BigInt(508),
      SaleAmountLargerThanMax: BigInt(509),
      WLSaleStartMustBeSaleStart: BigInt(510),
      WLSaleEndMustBeWithinSaleDatesAndAfterWLSaleStart: BigInt(511),
      WLSaleMaxBidLargerThanMinRaise: BigInt(512),
      WLSaleMaxBidSmallerThan1Alph: BigInt(513),
      WLSaleInvalidMerkleRootSize: BigInt(514),
      WLSaleMerkleRootMustNotBeZeroes: BigInt(515),
      IncorrectPairSetup: BigInt(516),
    },
  };

  at(address: string): SaleManagerInstance {
    return new SaleManagerInstance(address);
  }

  tests = {
    changeOwner: async (
      params: TestContractParamsWithoutMaps<
        SaleManagerTypes.Fields,
        { changeOwner: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "changeOwner", params);
    },
    migrate: async (
      params: TestContractParamsWithoutMaps<
        SaleManagerTypes.Fields,
        { changeCode: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "migrate", params);
    },
    migrateWithFields: async (
      params: TestContractParamsWithoutMaps<
        SaleManagerTypes.Fields,
        {
          changeCode: HexString;
          changeImmFieldsEncoded: HexString;
          changeMutFieldsEncoded: HexString;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "migrateWithFields", params);
    },
    changeOwnerApply: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "changeOwnerApply", params);
    },
    migrateApply: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "migrateApply", params);
    },
    migrateWithFieldsApply: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "migrateWithFieldsApply", params);
    },
    resetUpgrade: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "resetUpgrade", params);
    },
    getUpgradeDelay: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getUpgradeDelay", params);
    },
    getOwner: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getOwner", params);
    },
    getNewOwner: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getNewOwner", params);
    },
    getUpgradeCommenced: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getUpgradeCommenced", params);
    },
    getNewCode: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getNewCode", params);
    },
    getNewImmFieldsEncoded: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getNewImmFieldsEncoded", params);
    },
    getNewMutFieldsEncoded: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getNewMutFieldsEncoded", params);
    },
    resetFields: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "resetFields", params);
    },
    assertOnlyOwner: async (
      params: TestContractParamsWithoutMaps<
        SaleManagerTypes.Fields,
        { caller: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "assertOnlyOwner", params);
    },
    assertUpgradeNotPending: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "assertUpgradeNotPending", params);
    },
    assertUpgradeDelayElapsed: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "assertUpgradeDelayElapsed", params);
    },
    createSaleFlatPriceAlph: async (
      params: TestContractParamsWithoutMaps<
        SaleManagerTypes.Fields,
        {
          amountAlph: bigint;
          tokenPrice: bigint;
          saleStart: bigint;
          saleEnd: bigint;
          minRaise: bigint;
          maxRaise: bigint;
          saleTokenId: HexString;
          saleTokenTotalAmount: bigint;
          isWLSale: boolean;
          whitelistSaleStart: bigint;
          whitelistSaleEnd: bigint;
          whitelistBuyerMaxBid: bigint;
          merkleRoot: HexString;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "createSaleFlatPriceAlph", params);
    },
    calculateListingFee: async (
      params: Omit<
        TestContractParamsWithoutMaps<SaleManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "calculateListingFee", params);
    },
    assertPriceInRange: async (
      params: TestContractParamsWithoutMaps<
        SaleManagerTypes.Fields,
        { tokenPrice: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "assertPriceInRange", params);
    },
    assertAlphAmountInRange: async (
      params: TestContractParamsWithoutMaps<
        SaleManagerTypes.Fields,
        { alphAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "assertAlphAmountInRange", params);
    },
    assertSaleAmountInRange: async (
      params: TestContractParamsWithoutMaps<
        SaleManagerTypes.Fields,
        { saleAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "assertSaleAmountInRange", params);
    },
    assertSaleDates: async (
      params: TestContractParamsWithoutMaps<
        SaleManagerTypes.Fields,
        { saleStart: bigint; saleEnd: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "assertSaleDates", params);
    },
    assertListingFeePaid: async (
      params: TestContractParamsWithoutMaps<
        SaleManagerTypes.Fields,
        { amountAlph: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "assertListingFeePaid", params);
    },
  };
}

// Use this object to test and deploy the contract
export const SaleManager = new Factory(
  Contract.fromJson(
    SaleManagerContractJson,
    "",
    "5c4c81ea3e03eec11fb9694037c97fd69db3fcb5b6ad934dc936cb3992f2e43b"
  )
);

// Use this class to interact with the blockchain
export class SaleManagerInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<SaleManagerTypes.State> {
    return fetchContractState(SaleManager, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeChangeOwnerCommenceEvent(
    options: EventSubscribeOptions<SaleManagerTypes.ChangeOwnerCommenceEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SaleManager.contract,
      this,
      options,
      "ChangeOwnerCommence",
      fromCount
    );
  }

  subscribeChangeOwnerApplyEvent(
    options: EventSubscribeOptions<SaleManagerTypes.ChangeOwnerApplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SaleManager.contract,
      this,
      options,
      "ChangeOwnerApply",
      fromCount
    );
  }

  subscribeMigrateCommenceEvent(
    options: EventSubscribeOptions<SaleManagerTypes.MigrateCommenceEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SaleManager.contract,
      this,
      options,
      "MigrateCommence",
      fromCount
    );
  }

  subscribeMigrateApplyEvent(
    options: EventSubscribeOptions<SaleManagerTypes.MigrateApplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SaleManager.contract,
      this,
      options,
      "MigrateApply",
      fromCount
    );
  }

  subscribeMigrateWithFieldsCommenceEvent(
    options: EventSubscribeOptions<SaleManagerTypes.MigrateWithFieldsCommenceEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SaleManager.contract,
      this,
      options,
      "MigrateWithFieldsCommence",
      fromCount
    );
  }

  subscribeMigrateWithFieldsApplyEvent(
    options: EventSubscribeOptions<SaleManagerTypes.MigrateWithFieldsApplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SaleManager.contract,
      this,
      options,
      "MigrateWithFieldsApply",
      fromCount
    );
  }

  subscribeCreateSaleFlatPriceAlphEvent(
    options: EventSubscribeOptions<SaleManagerTypes.CreateSaleFlatPriceAlphEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SaleManager.contract,
      this,
      options,
      "CreateSaleFlatPriceAlph",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | SaleManagerTypes.ChangeOwnerCommenceEvent
      | SaleManagerTypes.ChangeOwnerApplyEvent
      | SaleManagerTypes.MigrateCommenceEvent
      | SaleManagerTypes.MigrateApplyEvent
      | SaleManagerTypes.MigrateWithFieldsCommenceEvent
      | SaleManagerTypes.MigrateWithFieldsApplyEvent
      | SaleManagerTypes.CreateSaleFlatPriceAlphEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      SaleManager.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    getUpgradeDelay: async (
      params?: SaleManagerTypes.CallMethodParams<"getUpgradeDelay">
    ): Promise<SaleManagerTypes.CallMethodResult<"getUpgradeDelay">> => {
      return callMethod(
        SaleManager,
        this,
        "getUpgradeDelay",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getOwner: async (
      params?: SaleManagerTypes.CallMethodParams<"getOwner">
    ): Promise<SaleManagerTypes.CallMethodResult<"getOwner">> => {
      return callMethod(
        SaleManager,
        this,
        "getOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewOwner: async (
      params?: SaleManagerTypes.CallMethodParams<"getNewOwner">
    ): Promise<SaleManagerTypes.CallMethodResult<"getNewOwner">> => {
      return callMethod(
        SaleManager,
        this,
        "getNewOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getUpgradeCommenced: async (
      params?: SaleManagerTypes.CallMethodParams<"getUpgradeCommenced">
    ): Promise<SaleManagerTypes.CallMethodResult<"getUpgradeCommenced">> => {
      return callMethod(
        SaleManager,
        this,
        "getUpgradeCommenced",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewCode: async (
      params?: SaleManagerTypes.CallMethodParams<"getNewCode">
    ): Promise<SaleManagerTypes.CallMethodResult<"getNewCode">> => {
      return callMethod(
        SaleManager,
        this,
        "getNewCode",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewImmFieldsEncoded: async (
      params?: SaleManagerTypes.CallMethodParams<"getNewImmFieldsEncoded">
    ): Promise<SaleManagerTypes.CallMethodResult<"getNewImmFieldsEncoded">> => {
      return callMethod(
        SaleManager,
        this,
        "getNewImmFieldsEncoded",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewMutFieldsEncoded: async (
      params?: SaleManagerTypes.CallMethodParams<"getNewMutFieldsEncoded">
    ): Promise<SaleManagerTypes.CallMethodResult<"getNewMutFieldsEncoded">> => {
      return callMethod(
        SaleManager,
        this,
        "getNewMutFieldsEncoded",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    calculateListingFee: async (
      params?: SaleManagerTypes.CallMethodParams<"calculateListingFee">
    ): Promise<SaleManagerTypes.CallMethodResult<"calculateListingFee">> => {
      return callMethod(
        SaleManager,
        this,
        "calculateListingFee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends SaleManagerTypes.MultiCallParams>(
    calls: Calls
  ): Promise<SaleManagerTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      SaleManager,
      this,
      calls,
      getContractByCodeHash
    )) as SaleManagerTypes.MultiCallResults<Calls>;
  }
}
