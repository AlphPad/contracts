/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as StakingAccountContractJson } from "../rewards/StakingAccount.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace StakingAccountTypes {
  export type Fields = {
    parentContractAddress: Address;
    accountHolder: Address;
    vestedStart: bigint;
    vestedTill: bigint;
    vestedTotalAmount: bigint;
    amountStaked: bigint;
    amountUnstaked: bigint;
    beginUnstakeAt: bigint;
    rewardPerToken: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    isSafeToDestroy: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
    getParentContractAddress: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getAccountHolder: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    calcVestedClaimable: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getVestedTotalAmount: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getVestedTill: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getVestedStart: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAmountStaked: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAmountUnstaked: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getBeginUnstakeAt: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getRewardPerToken: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  StakingAccountInstance,
  StakingAccountTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as StakingAccountTypes.Fields;
  }

  consts = {
    ErrorCodes: {
      InsufficientBalance: BigInt(111),
      AmountNotVested: BigInt(112),
      CanNotStakeToVestedAccounts: BigInt(113),
    },
    AccountBaseErrorCodes: {
      UnauthorizedAccess: BigInt(12101),
      UnsafeDestroy: BigInt(12102),
    },
  };

  at(address: string): StakingAccountInstance {
    return new StakingAccountInstance(address);
  }

  tests = {
    destroy: async (
      params: Omit<
        TestContractParams<StakingAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "destroy", params);
    },
    isSafeToDestroy: async (
      params: Omit<
        TestContractParams<StakingAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<boolean>> => {
      return testMethod(this, "isSafeToDestroy", params);
    },
    assertIsSafeToDestroy: async (
      params: Omit<
        TestContractParams<StakingAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "assertIsSafeToDestroy", params);
    },
    assertIsParentTheCaller: async (
      params: TestContractParams<
        StakingAccountTypes.Fields,
        { caller: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "assertIsParentTheCaller", params);
    },
    getParentContractAddress: async (
      params: Omit<
        TestContractParams<StakingAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getParentContractAddress", params);
    },
    getAccountHolder: async (
      params: Omit<
        TestContractParams<StakingAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getAccountHolder", params);
    },
    calcVestedClaimable: async (
      params: Omit<
        TestContractParams<StakingAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "calcVestedClaimable", params);
    },
    stake: async (
      params: TestContractParams<StakingAccountTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "stake", params);
    },
    unstake: async (
      params: TestContractParams<StakingAccountTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "unstake", params);
    },
    withdraw: async (
      params: Omit<
        TestContractParams<StakingAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdraw", params);
    },
    setRewardPerToken: async (
      params: TestContractParams<
        StakingAccountTypes.Fields,
        { newRewardPerToken: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setRewardPerToken", params);
    },
    getVestedTotalAmount: async (
      params: Omit<
        TestContractParams<StakingAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getVestedTotalAmount", params);
    },
    getVestedTill: async (
      params: Omit<
        TestContractParams<StakingAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getVestedTill", params);
    },
    getVestedStart: async (
      params: Omit<
        TestContractParams<StakingAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getVestedStart", params);
    },
    getAmountStaked: async (
      params: Omit<
        TestContractParams<StakingAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getAmountStaked", params);
    },
    getAmountUnstaked: async (
      params: Omit<
        TestContractParams<StakingAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getAmountUnstaked", params);
    },
    getBeginUnstakeAt: async (
      params: Omit<
        TestContractParams<StakingAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getBeginUnstakeAt", params);
    },
    getRewardPerToken: async (
      params: Omit<
        TestContractParams<StakingAccountTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getRewardPerToken", params);
    },
  };
}

// Use this object to test and deploy the contract
export const StakingAccount = new Factory(
  Contract.fromJson(
    StakingAccountContractJson,
    "",
    "ed8ca8e2bf6914710e8ee9e6e5939f362256ed1db2c93d402b6f919583095776"
  )
);

// Use this class to interact with the blockchain
export class StakingAccountInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<StakingAccountTypes.State> {
    return fetchContractState(StakingAccount, this);
  }

  methods = {
    isSafeToDestroy: async (
      params?: StakingAccountTypes.CallMethodParams<"isSafeToDestroy">
    ): Promise<StakingAccountTypes.CallMethodResult<"isSafeToDestroy">> => {
      return callMethod(
        StakingAccount,
        this,
        "isSafeToDestroy",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getParentContractAddress: async (
      params?: StakingAccountTypes.CallMethodParams<"getParentContractAddress">
    ): Promise<
      StakingAccountTypes.CallMethodResult<"getParentContractAddress">
    > => {
      return callMethod(
        StakingAccount,
        this,
        "getParentContractAddress",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAccountHolder: async (
      params?: StakingAccountTypes.CallMethodParams<"getAccountHolder">
    ): Promise<StakingAccountTypes.CallMethodResult<"getAccountHolder">> => {
      return callMethod(
        StakingAccount,
        this,
        "getAccountHolder",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    calcVestedClaimable: async (
      params?: StakingAccountTypes.CallMethodParams<"calcVestedClaimable">
    ): Promise<StakingAccountTypes.CallMethodResult<"calcVestedClaimable">> => {
      return callMethod(
        StakingAccount,
        this,
        "calcVestedClaimable",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getVestedTotalAmount: async (
      params?: StakingAccountTypes.CallMethodParams<"getVestedTotalAmount">
    ): Promise<
      StakingAccountTypes.CallMethodResult<"getVestedTotalAmount">
    > => {
      return callMethod(
        StakingAccount,
        this,
        "getVestedTotalAmount",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getVestedTill: async (
      params?: StakingAccountTypes.CallMethodParams<"getVestedTill">
    ): Promise<StakingAccountTypes.CallMethodResult<"getVestedTill">> => {
      return callMethod(
        StakingAccount,
        this,
        "getVestedTill",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getVestedStart: async (
      params?: StakingAccountTypes.CallMethodParams<"getVestedStart">
    ): Promise<StakingAccountTypes.CallMethodResult<"getVestedStart">> => {
      return callMethod(
        StakingAccount,
        this,
        "getVestedStart",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAmountStaked: async (
      params?: StakingAccountTypes.CallMethodParams<"getAmountStaked">
    ): Promise<StakingAccountTypes.CallMethodResult<"getAmountStaked">> => {
      return callMethod(
        StakingAccount,
        this,
        "getAmountStaked",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAmountUnstaked: async (
      params?: StakingAccountTypes.CallMethodParams<"getAmountUnstaked">
    ): Promise<StakingAccountTypes.CallMethodResult<"getAmountUnstaked">> => {
      return callMethod(
        StakingAccount,
        this,
        "getAmountUnstaked",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getBeginUnstakeAt: async (
      params?: StakingAccountTypes.CallMethodParams<"getBeginUnstakeAt">
    ): Promise<StakingAccountTypes.CallMethodResult<"getBeginUnstakeAt">> => {
      return callMethod(
        StakingAccount,
        this,
        "getBeginUnstakeAt",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getRewardPerToken: async (
      params?: StakingAccountTypes.CallMethodParams<"getRewardPerToken">
    ): Promise<StakingAccountTypes.CallMethodResult<"getRewardPerToken">> => {
      return callMethod(
        StakingAccount,
        this,
        "getRewardPerToken",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends StakingAccountTypes.MultiCallParams>(
    calls: Calls
  ): Promise<StakingAccountTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      StakingAccount,
      this,
      calls,
      getContractByCodeHash
    )) as StakingAccountTypes.MultiCallResults<Calls>;
  }
}
