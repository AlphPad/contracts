/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as StakingContractJson } from "../rewards/Staking.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace StakingTypes {
  export type Fields = {
    accountTemplateId: HexString;
    stakingTokenId: HexString;
    rewardsTokenId: HexString;
    unstakeLockTime: bigint;
    upgradeDelay: bigint;
    amountStaked: bigint;
    rewardPerToken: bigint;
    owner: Address;
    newOwner: Address;
    upgradeCommenced: bigint;
    newCode: HexString;
    newImmFieldsEncoded: HexString;
    newMutFieldsEncoded: HexString;
  };

  export type State = ContractState<Fields>;

  export type AccountCreateEvent = ContractEvent<{
    account: Address;
    contractId: HexString;
  }>;
  export type AccountDestroyEvent = ContractEvent<{
    account: Address;
    contractId: HexString;
  }>;
  export type ChangeOwnerCommenceEvent = ContractEvent<{
    owner: Address;
    changeOwner: Address;
  }>;
  export type ChangeOwnerApplyEvent = ContractEvent<{
    owner: Address;
    changeOwner: Address;
  }>;
  export type MigrateCommenceEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
  }>;
  export type MigrateApplyEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
  }>;
  export type MigrateWithFieldsCommenceEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
    changeImmFieldsEncoded: HexString;
    changeMutFieldsEncoded: HexString;
  }>;
  export type MigrateWithFieldsApplyEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
    changeImmFieldsEncoded: HexString;
    changeMutFieldsEncoded: HexString;
  }>;
  export type StakeEvent = ContractEvent<{ account: Address; amount: bigint }>;
  export type UnstakeEvent = ContractEvent<{
    account: Address;
    amount: bigint;
  }>;
  export type WithdrawEvent = ContractEvent<{
    account: Address;
    amount: bigint;
  }>;
  export type ClaimEvent = ContractEvent<{ account: Address; amount: bigint }>;
  export type DepositRewardEvent = ContractEvent<{
    account: Address;
    amount: bigint;
  }>;
  export type ClaimRewardEvent = ContractEvent<{
    account: Address;
    amount: bigint;
  }>;

  export interface CallMethodTable {
    changeOwner: {
      params: CallContractParams<{ changeOwner: Address }>;
      result: CallContractResult<null>;
    };
    migrate: {
      params: CallContractParams<{ changeCode: HexString }>;
      result: CallContractResult<null>;
    };
    migrateWithFields: {
      params: CallContractParams<{
        changeCode: HexString;
        changeImmFieldsEncoded: HexString;
        changeMutFieldsEncoded: HexString;
      }>;
      result: CallContractResult<null>;
    };
    changeOwnerApply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    migrateApply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    migrateWithFieldsApply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    resetUpgrade: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    accountExists: {
      params: CallContractParams<{ account: Address }>;
      result: CallContractResult<boolean>;
    };
    getSubContractId: {
      params: CallContractParams<{ account: Address }>;
      result: CallContractResult<HexString>;
    };
    getUpgradeDelay: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getNewOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getUpgradeCommenced: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getNewCode: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getNewImmFieldsEncoded: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getNewMutFieldsEncoded: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    stake: {
      params: CallContractParams<{ amount: bigint; vestingPeriod: bigint }>;
      result: CallContractResult<null>;
    };
    unstake: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    withdraw: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    depositRewards: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    claimRewards: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    getPendingRewards: {
      params: CallContractParams<{ staker: Address }>;
      result: CallContractResult<bigint>;
    };
    getStakingTokenId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getRewardsTokenId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getUnstakeLockTime: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAmountStaked: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getRewardPerToken: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    changeOwner: {
      params: SignExecuteContractMethodParams<{ changeOwner: Address }>;
      result: SignExecuteScriptTxResult;
    };
    migrate: {
      params: SignExecuteContractMethodParams<{ changeCode: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    migrateWithFields: {
      params: SignExecuteContractMethodParams<{
        changeCode: HexString;
        changeImmFieldsEncoded: HexString;
        changeMutFieldsEncoded: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    changeOwnerApply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    migrateApply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    migrateWithFieldsApply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    resetUpgrade: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    accountExists: {
      params: SignExecuteContractMethodParams<{ account: Address }>;
      result: SignExecuteScriptTxResult;
    };
    getSubContractId: {
      params: SignExecuteContractMethodParams<{ account: Address }>;
      result: SignExecuteScriptTxResult;
    };
    getUpgradeDelay: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getOwner: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewOwner: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getUpgradeCommenced: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewCode: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewImmFieldsEncoded: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewMutFieldsEncoded: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    stake: {
      params: SignExecuteContractMethodParams<{
        amount: bigint;
        vestingPeriod: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    unstake: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    withdraw: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    depositRewards: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    claimRewards: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getPendingRewards: {
      params: SignExecuteContractMethodParams<{ staker: Address }>;
      result: SignExecuteScriptTxResult;
    };
    getStakingTokenId: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getRewardsTokenId: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getUnstakeLockTime: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getAmountStaked: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getRewardPerToken: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<StakingInstance, StakingTypes.Fields> {
  encodeFields(fields: StakingTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as StakingTypes.Fields;
  }

  eventIndex = {
    AccountCreate: 0,
    AccountDestroy: 1,
    ChangeOwnerCommence: 2,
    ChangeOwnerApply: 3,
    MigrateCommence: 4,
    MigrateApply: 5,
    MigrateWithFieldsCommence: 6,
    MigrateWithFieldsApply: 7,
    Stake: 8,
    Unstake: 9,
    Withdraw: 10,
    Claim: 11,
    DepositReward: 12,
    ClaimReward: 13,
  };
  consts = {
    UpgradeErrorCodes: {
      Forbidden: BigInt(13000),
      UpgradePending: BigInt(13001),
      UpgradeNotPending: BigInt(13002),
      UpgradeDelayNotExpired: BigInt(13003),
      MigrateNotPending: BigInt(13004),
      MigrateWithFieldsNotPending: BigInt(13005),
      ChangeOwnerNotPending: BigInt(13006),
    },
    ErrorCodes: {
      UnstakeNotClaimable: BigInt(101),
      CanNotDepositRewardsToNoStakers: BigInt(102),
    },
    AccountErrorCodes: {
      AccountAlreadyExists: BigInt(12001),
      AccountDoesNotExists: BigInt(12002),
    },
  };

  at(address: string): StakingInstance {
    return new StakingInstance(address);
  }

  tests = {
    changeOwner: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { changeOwner: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "changeOwner", params, getContractByCodeHash);
    },
    migrate: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { changeCode: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "migrate", params, getContractByCodeHash);
    },
    migrateWithFields: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        {
          changeCode: HexString;
          changeImmFieldsEncoded: HexString;
          changeMutFieldsEncoded: HexString;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "migrateWithFields",
        params,
        getContractByCodeHash
      );
    },
    changeOwnerApply: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "changeOwnerApply",
        params,
        getContractByCodeHash
      );
    },
    migrateApply: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "migrateApply", params, getContractByCodeHash);
    },
    migrateWithFieldsApply: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "migrateWithFieldsApply",
        params,
        getContractByCodeHash
      );
    },
    resetUpgrade: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "resetUpgrade", params, getContractByCodeHash);
    },
    createAccount: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        {
          account: Address;
          encodedImmFields: HexString;
          encodedMutFields: HexString;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "createAccount", params, getContractByCodeHash);
    },
    destroyAccount: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { account: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "destroyAccount", params, getContractByCodeHash);
    },
    assertAccountExists: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { account: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "assertAccountExists",
        params,
        getContractByCodeHash
      );
    },
    accountExists: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { account: Address }
      >
    ): Promise<TestContractResultWithoutMaps<boolean>> => {
      return testMethod(this, "accountExists", params, getContractByCodeHash);
    },
    getSubContractId: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { account: Address }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getSubContractId",
        params,
        getContractByCodeHash
      );
    },
    getUpgradeDelay: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getUpgradeDelay", params, getContractByCodeHash);
    },
    getOwner: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getOwner", params, getContractByCodeHash);
    },
    getNewOwner: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getNewOwner", params, getContractByCodeHash);
    },
    getUpgradeCommenced: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getUpgradeCommenced",
        params,
        getContractByCodeHash
      );
    },
    getNewCode: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getNewCode", params, getContractByCodeHash);
    },
    getNewImmFieldsEncoded: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getNewImmFieldsEncoded",
        params,
        getContractByCodeHash
      );
    },
    getNewMutFieldsEncoded: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getNewMutFieldsEncoded",
        params,
        getContractByCodeHash
      );
    },
    resetFields: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "resetFields", params, getContractByCodeHash);
    },
    assertOnlyOwner: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { caller: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "assertOnlyOwner", params, getContractByCodeHash);
    },
    assertUpgradeNotPending: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "assertUpgradeNotPending",
        params,
        getContractByCodeHash
      );
    },
    assertUpgradeDelayElapsed: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "assertUpgradeDelayElapsed",
        params,
        getContractByCodeHash
      );
    },
    stake: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { amount: bigint; vestingPeriod: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "stake", params, getContractByCodeHash);
    },
    unstake: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "unstake", params, getContractByCodeHash);
    },
    withdraw: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdraw", params, getContractByCodeHash);
    },
    depositRewards: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "depositRewards", params, getContractByCodeHash);
    },
    claimRewards: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "claimRewards", params, getContractByCodeHash);
    },
    getPendingRewards: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { staker: Address }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getPendingRewards",
        params,
        getContractByCodeHash
      );
    },
    calcPendingRewards: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { account: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "calcPendingRewards",
        params,
        getContractByCodeHash
      );
    },
    claimRewardsForAccount: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { account: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "claimRewardsForAccount",
        params,
        getContractByCodeHash
      );
    },
    getStakingTokenId: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getStakingTokenId",
        params,
        getContractByCodeHash
      );
    },
    getRewardsTokenId: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getRewardsTokenId",
        params,
        getContractByCodeHash
      );
    },
    getUnstakeLockTime: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getUnstakeLockTime",
        params,
        getContractByCodeHash
      );
    },
    getAmountStaked: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getAmountStaked", params, getContractByCodeHash);
    },
    getRewardPerToken: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getRewardPerToken",
        params,
        getContractByCodeHash
      );
    },
    getRewardPerTokenScalingFactor: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getRewardPerTokenScalingFactor",
        params,
        getContractByCodeHash
      );
    },
  };
}

// Use this object to test and deploy the contract
export const Staking = new Factory(
  Contract.fromJson(
    StakingContractJson,
    "",
    "b74ef76385018945cc0581cf1d680f5c1aea0ed05976c3b50d2a2e0c9fa752dc",
    []
  )
);

// Use this class to interact with the blockchain
export class StakingInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<StakingTypes.State> {
    return fetchContractState(Staking, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeAccountCreateEvent(
    options: EventSubscribeOptions<StakingTypes.AccountCreateEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Staking.contract,
      this,
      options,
      "AccountCreate",
      fromCount
    );
  }

  subscribeAccountDestroyEvent(
    options: EventSubscribeOptions<StakingTypes.AccountDestroyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Staking.contract,
      this,
      options,
      "AccountDestroy",
      fromCount
    );
  }

  subscribeChangeOwnerCommenceEvent(
    options: EventSubscribeOptions<StakingTypes.ChangeOwnerCommenceEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Staking.contract,
      this,
      options,
      "ChangeOwnerCommence",
      fromCount
    );
  }

  subscribeChangeOwnerApplyEvent(
    options: EventSubscribeOptions<StakingTypes.ChangeOwnerApplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Staking.contract,
      this,
      options,
      "ChangeOwnerApply",
      fromCount
    );
  }

  subscribeMigrateCommenceEvent(
    options: EventSubscribeOptions<StakingTypes.MigrateCommenceEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Staking.contract,
      this,
      options,
      "MigrateCommence",
      fromCount
    );
  }

  subscribeMigrateApplyEvent(
    options: EventSubscribeOptions<StakingTypes.MigrateApplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Staking.contract,
      this,
      options,
      "MigrateApply",
      fromCount
    );
  }

  subscribeMigrateWithFieldsCommenceEvent(
    options: EventSubscribeOptions<StakingTypes.MigrateWithFieldsCommenceEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Staking.contract,
      this,
      options,
      "MigrateWithFieldsCommence",
      fromCount
    );
  }

  subscribeMigrateWithFieldsApplyEvent(
    options: EventSubscribeOptions<StakingTypes.MigrateWithFieldsApplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Staking.contract,
      this,
      options,
      "MigrateWithFieldsApply",
      fromCount
    );
  }

  subscribeStakeEvent(
    options: EventSubscribeOptions<StakingTypes.StakeEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Staking.contract,
      this,
      options,
      "Stake",
      fromCount
    );
  }

  subscribeUnstakeEvent(
    options: EventSubscribeOptions<StakingTypes.UnstakeEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Staking.contract,
      this,
      options,
      "Unstake",
      fromCount
    );
  }

  subscribeWithdrawEvent(
    options: EventSubscribeOptions<StakingTypes.WithdrawEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Staking.contract,
      this,
      options,
      "Withdraw",
      fromCount
    );
  }

  subscribeClaimEvent(
    options: EventSubscribeOptions<StakingTypes.ClaimEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Staking.contract,
      this,
      options,
      "Claim",
      fromCount
    );
  }

  subscribeDepositRewardEvent(
    options: EventSubscribeOptions<StakingTypes.DepositRewardEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Staking.contract,
      this,
      options,
      "DepositReward",
      fromCount
    );
  }

  subscribeClaimRewardEvent(
    options: EventSubscribeOptions<StakingTypes.ClaimRewardEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Staking.contract,
      this,
      options,
      "ClaimReward",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | StakingTypes.AccountCreateEvent
      | StakingTypes.AccountDestroyEvent
      | StakingTypes.ChangeOwnerCommenceEvent
      | StakingTypes.ChangeOwnerApplyEvent
      | StakingTypes.MigrateCommenceEvent
      | StakingTypes.MigrateApplyEvent
      | StakingTypes.MigrateWithFieldsCommenceEvent
      | StakingTypes.MigrateWithFieldsApplyEvent
      | StakingTypes.StakeEvent
      | StakingTypes.UnstakeEvent
      | StakingTypes.WithdrawEvent
      | StakingTypes.ClaimEvent
      | StakingTypes.DepositRewardEvent
      | StakingTypes.ClaimRewardEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(Staking.contract, this, options, fromCount);
  }

  methods = {
    changeOwner: async (
      params: StakingTypes.CallMethodParams<"changeOwner">
    ): Promise<StakingTypes.CallMethodResult<"changeOwner">> => {
      return callMethod(
        Staking,
        this,
        "changeOwner",
        params,
        getContractByCodeHash
      );
    },
    migrate: async (
      params: StakingTypes.CallMethodParams<"migrate">
    ): Promise<StakingTypes.CallMethodResult<"migrate">> => {
      return callMethod(
        Staking,
        this,
        "migrate",
        params,
        getContractByCodeHash
      );
    },
    migrateWithFields: async (
      params: StakingTypes.CallMethodParams<"migrateWithFields">
    ): Promise<StakingTypes.CallMethodResult<"migrateWithFields">> => {
      return callMethod(
        Staking,
        this,
        "migrateWithFields",
        params,
        getContractByCodeHash
      );
    },
    changeOwnerApply: async (
      params?: StakingTypes.CallMethodParams<"changeOwnerApply">
    ): Promise<StakingTypes.CallMethodResult<"changeOwnerApply">> => {
      return callMethod(
        Staking,
        this,
        "changeOwnerApply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    migrateApply: async (
      params?: StakingTypes.CallMethodParams<"migrateApply">
    ): Promise<StakingTypes.CallMethodResult<"migrateApply">> => {
      return callMethod(
        Staking,
        this,
        "migrateApply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    migrateWithFieldsApply: async (
      params?: StakingTypes.CallMethodParams<"migrateWithFieldsApply">
    ): Promise<StakingTypes.CallMethodResult<"migrateWithFieldsApply">> => {
      return callMethod(
        Staking,
        this,
        "migrateWithFieldsApply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    resetUpgrade: async (
      params?: StakingTypes.CallMethodParams<"resetUpgrade">
    ): Promise<StakingTypes.CallMethodResult<"resetUpgrade">> => {
      return callMethod(
        Staking,
        this,
        "resetUpgrade",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    accountExists: async (
      params: StakingTypes.CallMethodParams<"accountExists">
    ): Promise<StakingTypes.CallMethodResult<"accountExists">> => {
      return callMethod(
        Staking,
        this,
        "accountExists",
        params,
        getContractByCodeHash
      );
    },
    getSubContractId: async (
      params: StakingTypes.CallMethodParams<"getSubContractId">
    ): Promise<StakingTypes.CallMethodResult<"getSubContractId">> => {
      return callMethod(
        Staking,
        this,
        "getSubContractId",
        params,
        getContractByCodeHash
      );
    },
    getUpgradeDelay: async (
      params?: StakingTypes.CallMethodParams<"getUpgradeDelay">
    ): Promise<StakingTypes.CallMethodResult<"getUpgradeDelay">> => {
      return callMethod(
        Staking,
        this,
        "getUpgradeDelay",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getOwner: async (
      params?: StakingTypes.CallMethodParams<"getOwner">
    ): Promise<StakingTypes.CallMethodResult<"getOwner">> => {
      return callMethod(
        Staking,
        this,
        "getOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewOwner: async (
      params?: StakingTypes.CallMethodParams<"getNewOwner">
    ): Promise<StakingTypes.CallMethodResult<"getNewOwner">> => {
      return callMethod(
        Staking,
        this,
        "getNewOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getUpgradeCommenced: async (
      params?: StakingTypes.CallMethodParams<"getUpgradeCommenced">
    ): Promise<StakingTypes.CallMethodResult<"getUpgradeCommenced">> => {
      return callMethod(
        Staking,
        this,
        "getUpgradeCommenced",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewCode: async (
      params?: StakingTypes.CallMethodParams<"getNewCode">
    ): Promise<StakingTypes.CallMethodResult<"getNewCode">> => {
      return callMethod(
        Staking,
        this,
        "getNewCode",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewImmFieldsEncoded: async (
      params?: StakingTypes.CallMethodParams<"getNewImmFieldsEncoded">
    ): Promise<StakingTypes.CallMethodResult<"getNewImmFieldsEncoded">> => {
      return callMethod(
        Staking,
        this,
        "getNewImmFieldsEncoded",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewMutFieldsEncoded: async (
      params?: StakingTypes.CallMethodParams<"getNewMutFieldsEncoded">
    ): Promise<StakingTypes.CallMethodResult<"getNewMutFieldsEncoded">> => {
      return callMethod(
        Staking,
        this,
        "getNewMutFieldsEncoded",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    stake: async (
      params: StakingTypes.CallMethodParams<"stake">
    ): Promise<StakingTypes.CallMethodResult<"stake">> => {
      return callMethod(Staking, this, "stake", params, getContractByCodeHash);
    },
    unstake: async (
      params: StakingTypes.CallMethodParams<"unstake">
    ): Promise<StakingTypes.CallMethodResult<"unstake">> => {
      return callMethod(
        Staking,
        this,
        "unstake",
        params,
        getContractByCodeHash
      );
    },
    withdraw: async (
      params?: StakingTypes.CallMethodParams<"withdraw">
    ): Promise<StakingTypes.CallMethodResult<"withdraw">> => {
      return callMethod(
        Staking,
        this,
        "withdraw",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    depositRewards: async (
      params: StakingTypes.CallMethodParams<"depositRewards">
    ): Promise<StakingTypes.CallMethodResult<"depositRewards">> => {
      return callMethod(
        Staking,
        this,
        "depositRewards",
        params,
        getContractByCodeHash
      );
    },
    claimRewards: async (
      params?: StakingTypes.CallMethodParams<"claimRewards">
    ): Promise<StakingTypes.CallMethodResult<"claimRewards">> => {
      return callMethod(
        Staking,
        this,
        "claimRewards",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getPendingRewards: async (
      params: StakingTypes.CallMethodParams<"getPendingRewards">
    ): Promise<StakingTypes.CallMethodResult<"getPendingRewards">> => {
      return callMethod(
        Staking,
        this,
        "getPendingRewards",
        params,
        getContractByCodeHash
      );
    },
    getStakingTokenId: async (
      params?: StakingTypes.CallMethodParams<"getStakingTokenId">
    ): Promise<StakingTypes.CallMethodResult<"getStakingTokenId">> => {
      return callMethod(
        Staking,
        this,
        "getStakingTokenId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getRewardsTokenId: async (
      params?: StakingTypes.CallMethodParams<"getRewardsTokenId">
    ): Promise<StakingTypes.CallMethodResult<"getRewardsTokenId">> => {
      return callMethod(
        Staking,
        this,
        "getRewardsTokenId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getUnstakeLockTime: async (
      params?: StakingTypes.CallMethodParams<"getUnstakeLockTime">
    ): Promise<StakingTypes.CallMethodResult<"getUnstakeLockTime">> => {
      return callMethod(
        Staking,
        this,
        "getUnstakeLockTime",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAmountStaked: async (
      params?: StakingTypes.CallMethodParams<"getAmountStaked">
    ): Promise<StakingTypes.CallMethodResult<"getAmountStaked">> => {
      return callMethod(
        Staking,
        this,
        "getAmountStaked",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getRewardPerToken: async (
      params?: StakingTypes.CallMethodParams<"getRewardPerToken">
    ): Promise<StakingTypes.CallMethodResult<"getRewardPerToken">> => {
      return callMethod(
        Staking,
        this,
        "getRewardPerToken",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  view = this.methods;

  transact = {
    changeOwner: async (
      params: StakingTypes.SignExecuteMethodParams<"changeOwner">
    ): Promise<StakingTypes.SignExecuteMethodResult<"changeOwner">> => {
      return signExecuteMethod(Staking, this, "changeOwner", params);
    },
    migrate: async (
      params: StakingTypes.SignExecuteMethodParams<"migrate">
    ): Promise<StakingTypes.SignExecuteMethodResult<"migrate">> => {
      return signExecuteMethod(Staking, this, "migrate", params);
    },
    migrateWithFields: async (
      params: StakingTypes.SignExecuteMethodParams<"migrateWithFields">
    ): Promise<StakingTypes.SignExecuteMethodResult<"migrateWithFields">> => {
      return signExecuteMethod(Staking, this, "migrateWithFields", params);
    },
    changeOwnerApply: async (
      params: StakingTypes.SignExecuteMethodParams<"changeOwnerApply">
    ): Promise<StakingTypes.SignExecuteMethodResult<"changeOwnerApply">> => {
      return signExecuteMethod(Staking, this, "changeOwnerApply", params);
    },
    migrateApply: async (
      params: StakingTypes.SignExecuteMethodParams<"migrateApply">
    ): Promise<StakingTypes.SignExecuteMethodResult<"migrateApply">> => {
      return signExecuteMethod(Staking, this, "migrateApply", params);
    },
    migrateWithFieldsApply: async (
      params: StakingTypes.SignExecuteMethodParams<"migrateWithFieldsApply">
    ): Promise<
      StakingTypes.SignExecuteMethodResult<"migrateWithFieldsApply">
    > => {
      return signExecuteMethod(Staking, this, "migrateWithFieldsApply", params);
    },
    resetUpgrade: async (
      params: StakingTypes.SignExecuteMethodParams<"resetUpgrade">
    ): Promise<StakingTypes.SignExecuteMethodResult<"resetUpgrade">> => {
      return signExecuteMethod(Staking, this, "resetUpgrade", params);
    },
    accountExists: async (
      params: StakingTypes.SignExecuteMethodParams<"accountExists">
    ): Promise<StakingTypes.SignExecuteMethodResult<"accountExists">> => {
      return signExecuteMethod(Staking, this, "accountExists", params);
    },
    getSubContractId: async (
      params: StakingTypes.SignExecuteMethodParams<"getSubContractId">
    ): Promise<StakingTypes.SignExecuteMethodResult<"getSubContractId">> => {
      return signExecuteMethod(Staking, this, "getSubContractId", params);
    },
    getUpgradeDelay: async (
      params: StakingTypes.SignExecuteMethodParams<"getUpgradeDelay">
    ): Promise<StakingTypes.SignExecuteMethodResult<"getUpgradeDelay">> => {
      return signExecuteMethod(Staking, this, "getUpgradeDelay", params);
    },
    getOwner: async (
      params: StakingTypes.SignExecuteMethodParams<"getOwner">
    ): Promise<StakingTypes.SignExecuteMethodResult<"getOwner">> => {
      return signExecuteMethod(Staking, this, "getOwner", params);
    },
    getNewOwner: async (
      params: StakingTypes.SignExecuteMethodParams<"getNewOwner">
    ): Promise<StakingTypes.SignExecuteMethodResult<"getNewOwner">> => {
      return signExecuteMethod(Staking, this, "getNewOwner", params);
    },
    getUpgradeCommenced: async (
      params: StakingTypes.SignExecuteMethodParams<"getUpgradeCommenced">
    ): Promise<StakingTypes.SignExecuteMethodResult<"getUpgradeCommenced">> => {
      return signExecuteMethod(Staking, this, "getUpgradeCommenced", params);
    },
    getNewCode: async (
      params: StakingTypes.SignExecuteMethodParams<"getNewCode">
    ): Promise<StakingTypes.SignExecuteMethodResult<"getNewCode">> => {
      return signExecuteMethod(Staking, this, "getNewCode", params);
    },
    getNewImmFieldsEncoded: async (
      params: StakingTypes.SignExecuteMethodParams<"getNewImmFieldsEncoded">
    ): Promise<
      StakingTypes.SignExecuteMethodResult<"getNewImmFieldsEncoded">
    > => {
      return signExecuteMethod(Staking, this, "getNewImmFieldsEncoded", params);
    },
    getNewMutFieldsEncoded: async (
      params: StakingTypes.SignExecuteMethodParams<"getNewMutFieldsEncoded">
    ): Promise<
      StakingTypes.SignExecuteMethodResult<"getNewMutFieldsEncoded">
    > => {
      return signExecuteMethod(Staking, this, "getNewMutFieldsEncoded", params);
    },
    stake: async (
      params: StakingTypes.SignExecuteMethodParams<"stake">
    ): Promise<StakingTypes.SignExecuteMethodResult<"stake">> => {
      return signExecuteMethod(Staking, this, "stake", params);
    },
    unstake: async (
      params: StakingTypes.SignExecuteMethodParams<"unstake">
    ): Promise<StakingTypes.SignExecuteMethodResult<"unstake">> => {
      return signExecuteMethod(Staking, this, "unstake", params);
    },
    withdraw: async (
      params: StakingTypes.SignExecuteMethodParams<"withdraw">
    ): Promise<StakingTypes.SignExecuteMethodResult<"withdraw">> => {
      return signExecuteMethod(Staking, this, "withdraw", params);
    },
    depositRewards: async (
      params: StakingTypes.SignExecuteMethodParams<"depositRewards">
    ): Promise<StakingTypes.SignExecuteMethodResult<"depositRewards">> => {
      return signExecuteMethod(Staking, this, "depositRewards", params);
    },
    claimRewards: async (
      params: StakingTypes.SignExecuteMethodParams<"claimRewards">
    ): Promise<StakingTypes.SignExecuteMethodResult<"claimRewards">> => {
      return signExecuteMethod(Staking, this, "claimRewards", params);
    },
    getPendingRewards: async (
      params: StakingTypes.SignExecuteMethodParams<"getPendingRewards">
    ): Promise<StakingTypes.SignExecuteMethodResult<"getPendingRewards">> => {
      return signExecuteMethod(Staking, this, "getPendingRewards", params);
    },
    getStakingTokenId: async (
      params: StakingTypes.SignExecuteMethodParams<"getStakingTokenId">
    ): Promise<StakingTypes.SignExecuteMethodResult<"getStakingTokenId">> => {
      return signExecuteMethod(Staking, this, "getStakingTokenId", params);
    },
    getRewardsTokenId: async (
      params: StakingTypes.SignExecuteMethodParams<"getRewardsTokenId">
    ): Promise<StakingTypes.SignExecuteMethodResult<"getRewardsTokenId">> => {
      return signExecuteMethod(Staking, this, "getRewardsTokenId", params);
    },
    getUnstakeLockTime: async (
      params: StakingTypes.SignExecuteMethodParams<"getUnstakeLockTime">
    ): Promise<StakingTypes.SignExecuteMethodResult<"getUnstakeLockTime">> => {
      return signExecuteMethod(Staking, this, "getUnstakeLockTime", params);
    },
    getAmountStaked: async (
      params: StakingTypes.SignExecuteMethodParams<"getAmountStaked">
    ): Promise<StakingTypes.SignExecuteMethodResult<"getAmountStaked">> => {
      return signExecuteMethod(Staking, this, "getAmountStaked", params);
    },
    getRewardPerToken: async (
      params: StakingTypes.SignExecuteMethodParams<"getRewardPerToken">
    ): Promise<StakingTypes.SignExecuteMethodResult<"getRewardPerToken">> => {
      return signExecuteMethod(Staking, this, "getRewardPerToken", params);
    },
  };

  async multicall<Calls extends StakingTypes.MultiCallParams>(
    calls: Calls
  ): Promise<StakingTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Staking,
      this,
      calls,
      getContractByCodeHash
    )) as StakingTypes.MultiCallResults<Calls>;
  }
}
