/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as TokenPairContractJson } from "../external/dummy/TokenPair.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace TokenPairTypes {
  export type Fields = {
    token0Id: HexString;
    token1Id: HexString;
    reserve0: bigint;
    reserve1: bigint;
    blockTimeStampLast: bigint;
    price0CumulativeLast: bigint;
    price1CumulativeLast: bigint;
    totalSupply: bigint;
    feeCollectorId: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getSymbol: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getDecimals: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getTotalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    uqdiv: {
      params: CallContractParams<{ a: bigint; b: bigint }>;
      result: CallContractResult<bigint>;
    };
    sqrt: {
      params: CallContractParams<{ y: bigint }>;
      result: CallContractResult<bigint>;
    };
    setFeeCollectorId: {
      params: CallContractParams<{ id: HexString }>;
      result: CallContractResult<null>;
    };
    getTokenPair: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[HexString, HexString]>;
    };
    getReserves: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[bigint, bigint]>;
    };
    getBlockTimeStampLast: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getPrice0CumulativeLast: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getPrice1CumulativeLast: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    getSymbol: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getName: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getDecimals: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getTotalSupply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    uqdiv: {
      params: SignExecuteContractMethodParams<{ a: bigint; b: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    sqrt: {
      params: SignExecuteContractMethodParams<{ y: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    setFeeCollectorId: {
      params: SignExecuteContractMethodParams<{ id: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    getTokenPair: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getReserves: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getBlockTimeStampLast: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getPrice0CumulativeLast: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getPrice1CumulativeLast: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  TokenPairInstance,
  TokenPairTypes.Fields
> {
  encodeFields(fields: TokenPairTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as TokenPairTypes.Fields;
  }

  at(address: string): TokenPairInstance {
    return new TokenPairInstance(address);
  }

  tests = {
    getSymbol: async (
      params: Omit<
        TestContractParamsWithoutMaps<TokenPairTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getSymbol", params, getContractByCodeHash);
    },
    getName: async (
      params: Omit<
        TestContractParamsWithoutMaps<TokenPairTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getName", params, getContractByCodeHash);
    },
    getDecimals: async (
      params: Omit<
        TestContractParamsWithoutMaps<TokenPairTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getDecimals", params, getContractByCodeHash);
    },
    getTotalSupply: async (
      params: Omit<
        TestContractParamsWithoutMaps<TokenPairTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getTotalSupply", params, getContractByCodeHash);
    },
    uqdiv: async (
      params: TestContractParamsWithoutMaps<
        TokenPairTypes.Fields,
        { a: bigint; b: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "uqdiv", params, getContractByCodeHash);
    },
    sqrt: async (
      params: TestContractParamsWithoutMaps<
        TokenPairTypes.Fields,
        { y: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "sqrt", params, getContractByCodeHash);
    },
    setFeeCollectorId: async (
      params: TestContractParamsWithoutMaps<
        TokenPairTypes.Fields,
        { id: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "setFeeCollectorId",
        params,
        getContractByCodeHash
      );
    },
    getTokenPair: async (
      params: Omit<
        TestContractParamsWithoutMaps<TokenPairTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<[HexString, HexString]>> => {
      return testMethod(this, "getTokenPair", params, getContractByCodeHash);
    },
    getReserves: async (
      params: Omit<
        TestContractParamsWithoutMaps<TokenPairTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<[bigint, bigint]>> => {
      return testMethod(this, "getReserves", params, getContractByCodeHash);
    },
    pairName_: async (
      params: Omit<
        TestContractParamsWithoutMaps<TokenPairTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "pairName_", params, getContractByCodeHash);
    },
    getBlockTimeStampLast: async (
      params: Omit<
        TestContractParamsWithoutMaps<TokenPairTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getBlockTimeStampLast",
        params,
        getContractByCodeHash
      );
    },
    getPrice0CumulativeLast: async (
      params: Omit<
        TestContractParamsWithoutMaps<TokenPairTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getPrice0CumulativeLast",
        params,
        getContractByCodeHash
      );
    },
    getPrice1CumulativeLast: async (
      params: Omit<
        TestContractParamsWithoutMaps<TokenPairTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getPrice1CumulativeLast",
        params,
        getContractByCodeHash
      );
    },
  };
}

// Use this object to test and deploy the contract
export const TokenPair = new Factory(
  Contract.fromJson(
    TokenPairContractJson,
    "",
    "2b98401ce86b160c0f357390bd72a4cf9eb66d57e490ac7d6553b40749b092ac",
    []
  )
);

// Use this class to interact with the blockchain
export class TokenPairInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TokenPairTypes.State> {
    return fetchContractState(TokenPair, this);
  }

  methods = {
    getSymbol: async (
      params?: TokenPairTypes.CallMethodParams<"getSymbol">
    ): Promise<TokenPairTypes.CallMethodResult<"getSymbol">> => {
      return callMethod(
        TokenPair,
        this,
        "getSymbol",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getName: async (
      params?: TokenPairTypes.CallMethodParams<"getName">
    ): Promise<TokenPairTypes.CallMethodResult<"getName">> => {
      return callMethod(
        TokenPair,
        this,
        "getName",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getDecimals: async (
      params?: TokenPairTypes.CallMethodParams<"getDecimals">
    ): Promise<TokenPairTypes.CallMethodResult<"getDecimals">> => {
      return callMethod(
        TokenPair,
        this,
        "getDecimals",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotalSupply: async (
      params?: TokenPairTypes.CallMethodParams<"getTotalSupply">
    ): Promise<TokenPairTypes.CallMethodResult<"getTotalSupply">> => {
      return callMethod(
        TokenPair,
        this,
        "getTotalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    uqdiv: async (
      params: TokenPairTypes.CallMethodParams<"uqdiv">
    ): Promise<TokenPairTypes.CallMethodResult<"uqdiv">> => {
      return callMethod(
        TokenPair,
        this,
        "uqdiv",
        params,
        getContractByCodeHash
      );
    },
    sqrt: async (
      params: TokenPairTypes.CallMethodParams<"sqrt">
    ): Promise<TokenPairTypes.CallMethodResult<"sqrt">> => {
      return callMethod(TokenPair, this, "sqrt", params, getContractByCodeHash);
    },
    setFeeCollectorId: async (
      params: TokenPairTypes.CallMethodParams<"setFeeCollectorId">
    ): Promise<TokenPairTypes.CallMethodResult<"setFeeCollectorId">> => {
      return callMethod(
        TokenPair,
        this,
        "setFeeCollectorId",
        params,
        getContractByCodeHash
      );
    },
    getTokenPair: async (
      params?: TokenPairTypes.CallMethodParams<"getTokenPair">
    ): Promise<TokenPairTypes.CallMethodResult<"getTokenPair">> => {
      return callMethod(
        TokenPair,
        this,
        "getTokenPair",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getReserves: async (
      params?: TokenPairTypes.CallMethodParams<"getReserves">
    ): Promise<TokenPairTypes.CallMethodResult<"getReserves">> => {
      return callMethod(
        TokenPair,
        this,
        "getReserves",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getBlockTimeStampLast: async (
      params?: TokenPairTypes.CallMethodParams<"getBlockTimeStampLast">
    ): Promise<TokenPairTypes.CallMethodResult<"getBlockTimeStampLast">> => {
      return callMethod(
        TokenPair,
        this,
        "getBlockTimeStampLast",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getPrice0CumulativeLast: async (
      params?: TokenPairTypes.CallMethodParams<"getPrice0CumulativeLast">
    ): Promise<TokenPairTypes.CallMethodResult<"getPrice0CumulativeLast">> => {
      return callMethod(
        TokenPair,
        this,
        "getPrice0CumulativeLast",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getPrice1CumulativeLast: async (
      params?: TokenPairTypes.CallMethodParams<"getPrice1CumulativeLast">
    ): Promise<TokenPairTypes.CallMethodResult<"getPrice1CumulativeLast">> => {
      return callMethod(
        TokenPair,
        this,
        "getPrice1CumulativeLast",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  view = this.methods;

  transact = {
    getSymbol: async (
      params: TokenPairTypes.SignExecuteMethodParams<"getSymbol">
    ): Promise<TokenPairTypes.SignExecuteMethodResult<"getSymbol">> => {
      return signExecuteMethod(TokenPair, this, "getSymbol", params);
    },
    getName: async (
      params: TokenPairTypes.SignExecuteMethodParams<"getName">
    ): Promise<TokenPairTypes.SignExecuteMethodResult<"getName">> => {
      return signExecuteMethod(TokenPair, this, "getName", params);
    },
    getDecimals: async (
      params: TokenPairTypes.SignExecuteMethodParams<"getDecimals">
    ): Promise<TokenPairTypes.SignExecuteMethodResult<"getDecimals">> => {
      return signExecuteMethod(TokenPair, this, "getDecimals", params);
    },
    getTotalSupply: async (
      params: TokenPairTypes.SignExecuteMethodParams<"getTotalSupply">
    ): Promise<TokenPairTypes.SignExecuteMethodResult<"getTotalSupply">> => {
      return signExecuteMethod(TokenPair, this, "getTotalSupply", params);
    },
    uqdiv: async (
      params: TokenPairTypes.SignExecuteMethodParams<"uqdiv">
    ): Promise<TokenPairTypes.SignExecuteMethodResult<"uqdiv">> => {
      return signExecuteMethod(TokenPair, this, "uqdiv", params);
    },
    sqrt: async (
      params: TokenPairTypes.SignExecuteMethodParams<"sqrt">
    ): Promise<TokenPairTypes.SignExecuteMethodResult<"sqrt">> => {
      return signExecuteMethod(TokenPair, this, "sqrt", params);
    },
    setFeeCollectorId: async (
      params: TokenPairTypes.SignExecuteMethodParams<"setFeeCollectorId">
    ): Promise<TokenPairTypes.SignExecuteMethodResult<"setFeeCollectorId">> => {
      return signExecuteMethod(TokenPair, this, "setFeeCollectorId", params);
    },
    getTokenPair: async (
      params: TokenPairTypes.SignExecuteMethodParams<"getTokenPair">
    ): Promise<TokenPairTypes.SignExecuteMethodResult<"getTokenPair">> => {
      return signExecuteMethod(TokenPair, this, "getTokenPair", params);
    },
    getReserves: async (
      params: TokenPairTypes.SignExecuteMethodParams<"getReserves">
    ): Promise<TokenPairTypes.SignExecuteMethodResult<"getReserves">> => {
      return signExecuteMethod(TokenPair, this, "getReserves", params);
    },
    getBlockTimeStampLast: async (
      params: TokenPairTypes.SignExecuteMethodParams<"getBlockTimeStampLast">
    ): Promise<
      TokenPairTypes.SignExecuteMethodResult<"getBlockTimeStampLast">
    > => {
      return signExecuteMethod(
        TokenPair,
        this,
        "getBlockTimeStampLast",
        params
      );
    },
    getPrice0CumulativeLast: async (
      params: TokenPairTypes.SignExecuteMethodParams<"getPrice0CumulativeLast">
    ): Promise<
      TokenPairTypes.SignExecuteMethodResult<"getPrice0CumulativeLast">
    > => {
      return signExecuteMethod(
        TokenPair,
        this,
        "getPrice0CumulativeLast",
        params
      );
    },
    getPrice1CumulativeLast: async (
      params: TokenPairTypes.SignExecuteMethodParams<"getPrice1CumulativeLast">
    ): Promise<
      TokenPairTypes.SignExecuteMethodResult<"getPrice1CumulativeLast">
    > => {
      return signExecuteMethod(
        TokenPair,
        this,
        "getPrice1CumulativeLast",
        params
      );
    },
  };

  async multicall<Calls extends TokenPairTypes.MultiCallParams>(
    calls: Calls
  ): Promise<TokenPairTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      TokenPair,
      this,
      calls,
      getContractByCodeHash
    )) as TokenPairTypes.MultiCallResults<Calls>;
  }
}
