/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as TestUpgradableV2ContractJson } from "../lib/dummy/TestUpgradableV2.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace TestUpgradableV2Types {
  export type Fields = {
    immValue: bigint;
    upgradeDelay: bigint;
    mutValue: bigint;
    owner: Address;
    newOwner: Address;
    upgradeCommenced: bigint;
    newCode: HexString;
    newImmFieldsEncoded: HexString;
    newMutFieldsEncoded: HexString;
  };

  export type State = ContractState<Fields>;

  export type ChangeOwnerCommenceEvent = ContractEvent<{
    owner: Address;
    changeOwner: Address;
  }>;
  export type ChangeOwnerApplyEvent = ContractEvent<{
    owner: Address;
    changeOwner: Address;
  }>;
  export type MigrateCommenceEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
  }>;
  export type MigrateApplyEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
  }>;
  export type MigrateWithFieldsCommenceEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
    changeImmFieldsEncoded: HexString;
    changeMutFieldsEncoded: HexString;
  }>;
  export type MigrateWithFieldsApplyEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
    changeImmFieldsEncoded: HexString;
    changeMutFieldsEncoded: HexString;
  }>;

  export interface CallMethodTable {
    changeOwner: {
      params: CallContractParams<{ changeOwner: Address }>;
      result: CallContractResult<null>;
    };
    migrate: {
      params: CallContractParams<{ changeCode: HexString }>;
      result: CallContractResult<null>;
    };
    migrateWithFields: {
      params: CallContractParams<{
        changeCode: HexString;
        changeImmFieldsEncoded: HexString;
        changeMutFieldsEncoded: HexString;
      }>;
      result: CallContractResult<null>;
    };
    changeOwnerApply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    migrateApply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    migrateWithFieldsApply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    resetUpgrade: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    getUpgradeDelay: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getNewOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getUpgradeCommenced: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getNewCode: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getNewImmFieldsEncoded: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getNewMutFieldsEncoded: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getImmValue: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getMutValue: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getTotal: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    setMutValue: {
      params: CallContractParams<{ newMutValue: bigint }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    changeOwner: {
      params: SignExecuteContractMethodParams<{ changeOwner: Address }>;
      result: SignExecuteScriptTxResult;
    };
    migrate: {
      params: SignExecuteContractMethodParams<{ changeCode: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    migrateWithFields: {
      params: SignExecuteContractMethodParams<{
        changeCode: HexString;
        changeImmFieldsEncoded: HexString;
        changeMutFieldsEncoded: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    changeOwnerApply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    migrateApply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    migrateWithFieldsApply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    resetUpgrade: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getUpgradeDelay: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getOwner: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewOwner: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getUpgradeCommenced: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewCode: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewImmFieldsEncoded: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewMutFieldsEncoded: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getImmValue: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getMutValue: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getTotal: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    setMutValue: {
      params: SignExecuteContractMethodParams<{ newMutValue: bigint }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  TestUpgradableV2Instance,
  TestUpgradableV2Types.Fields
> {
  encodeFields(fields: TestUpgradableV2Types.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as TestUpgradableV2Types.Fields;
  }

  eventIndex = {
    ChangeOwnerCommence: 0,
    ChangeOwnerApply: 1,
    MigrateCommence: 2,
    MigrateApply: 3,
    MigrateWithFieldsCommence: 4,
    MigrateWithFieldsApply: 5,
  };
  consts = {
    UpgradeErrorCodes: {
      Forbidden: BigInt(13000),
      UpgradePending: BigInt(13001),
      UpgradeNotPending: BigInt(13002),
      UpgradeDelayNotExpired: BigInt(13003),
      MigrateNotPending: BigInt(13004),
      MigrateWithFieldsNotPending: BigInt(13005),
      ChangeOwnerNotPending: BigInt(13006),
    },
  };

  at(address: string): TestUpgradableV2Instance {
    return new TestUpgradableV2Instance(address);
  }

  tests = {
    changeOwner: async (
      params: TestContractParamsWithoutMaps<
        TestUpgradableV2Types.Fields,
        { changeOwner: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "changeOwner", params, getContractByCodeHash);
    },
    migrate: async (
      params: TestContractParamsWithoutMaps<
        TestUpgradableV2Types.Fields,
        { changeCode: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "migrate", params, getContractByCodeHash);
    },
    migrateWithFields: async (
      params: TestContractParamsWithoutMaps<
        TestUpgradableV2Types.Fields,
        {
          changeCode: HexString;
          changeImmFieldsEncoded: HexString;
          changeMutFieldsEncoded: HexString;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "migrateWithFields",
        params,
        getContractByCodeHash
      );
    },
    changeOwnerApply: async (
      params: Omit<
        TestContractParamsWithoutMaps<TestUpgradableV2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "changeOwnerApply",
        params,
        getContractByCodeHash
      );
    },
    migrateApply: async (
      params: Omit<
        TestContractParamsWithoutMaps<TestUpgradableV2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "migrateApply", params, getContractByCodeHash);
    },
    migrateWithFieldsApply: async (
      params: Omit<
        TestContractParamsWithoutMaps<TestUpgradableV2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "migrateWithFieldsApply",
        params,
        getContractByCodeHash
      );
    },
    resetUpgrade: async (
      params: Omit<
        TestContractParamsWithoutMaps<TestUpgradableV2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "resetUpgrade", params, getContractByCodeHash);
    },
    getUpgradeDelay: async (
      params: Omit<
        TestContractParamsWithoutMaps<TestUpgradableV2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getUpgradeDelay", params, getContractByCodeHash);
    },
    getOwner: async (
      params: Omit<
        TestContractParamsWithoutMaps<TestUpgradableV2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getOwner", params, getContractByCodeHash);
    },
    getNewOwner: async (
      params: Omit<
        TestContractParamsWithoutMaps<TestUpgradableV2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getNewOwner", params, getContractByCodeHash);
    },
    getUpgradeCommenced: async (
      params: Omit<
        TestContractParamsWithoutMaps<TestUpgradableV2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getUpgradeCommenced",
        params,
        getContractByCodeHash
      );
    },
    getNewCode: async (
      params: Omit<
        TestContractParamsWithoutMaps<TestUpgradableV2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getNewCode", params, getContractByCodeHash);
    },
    getNewImmFieldsEncoded: async (
      params: Omit<
        TestContractParamsWithoutMaps<TestUpgradableV2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getNewImmFieldsEncoded",
        params,
        getContractByCodeHash
      );
    },
    getNewMutFieldsEncoded: async (
      params: Omit<
        TestContractParamsWithoutMaps<TestUpgradableV2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getNewMutFieldsEncoded",
        params,
        getContractByCodeHash
      );
    },
    resetFields: async (
      params: Omit<
        TestContractParamsWithoutMaps<TestUpgradableV2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "resetFields", params, getContractByCodeHash);
    },
    assertOnlyOwner: async (
      params: TestContractParamsWithoutMaps<
        TestUpgradableV2Types.Fields,
        { caller: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "assertOnlyOwner", params, getContractByCodeHash);
    },
    assertUpgradeNotPending: async (
      params: Omit<
        TestContractParamsWithoutMaps<TestUpgradableV2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "assertUpgradeNotPending",
        params,
        getContractByCodeHash
      );
    },
    assertUpgradeDelayElapsed: async (
      params: Omit<
        TestContractParamsWithoutMaps<TestUpgradableV2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "assertUpgradeDelayElapsed",
        params,
        getContractByCodeHash
      );
    },
    getImmValue: async (
      params: Omit<
        TestContractParamsWithoutMaps<TestUpgradableV2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getImmValue", params, getContractByCodeHash);
    },
    getMutValue: async (
      params: Omit<
        TestContractParamsWithoutMaps<TestUpgradableV2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getMutValue", params, getContractByCodeHash);
    },
    getTotal: async (
      params: Omit<
        TestContractParamsWithoutMaps<TestUpgradableV2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getTotal", params, getContractByCodeHash);
    },
    setMutValue: async (
      params: TestContractParamsWithoutMaps<
        TestUpgradableV2Types.Fields,
        { newMutValue: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setMutValue", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const TestUpgradableV2 = new Factory(
  Contract.fromJson(
    TestUpgradableV2ContractJson,
    "",
    "acb86f28101a38a11d92aaad09ec4e4af2367ef7b61c319b28075d321677b0d5",
    []
  )
);

// Use this class to interact with the blockchain
export class TestUpgradableV2Instance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TestUpgradableV2Types.State> {
    return fetchContractState(TestUpgradableV2, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeChangeOwnerCommenceEvent(
    options: EventSubscribeOptions<TestUpgradableV2Types.ChangeOwnerCommenceEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TestUpgradableV2.contract,
      this,
      options,
      "ChangeOwnerCommence",
      fromCount
    );
  }

  subscribeChangeOwnerApplyEvent(
    options: EventSubscribeOptions<TestUpgradableV2Types.ChangeOwnerApplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TestUpgradableV2.contract,
      this,
      options,
      "ChangeOwnerApply",
      fromCount
    );
  }

  subscribeMigrateCommenceEvent(
    options: EventSubscribeOptions<TestUpgradableV2Types.MigrateCommenceEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TestUpgradableV2.contract,
      this,
      options,
      "MigrateCommence",
      fromCount
    );
  }

  subscribeMigrateApplyEvent(
    options: EventSubscribeOptions<TestUpgradableV2Types.MigrateApplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TestUpgradableV2.contract,
      this,
      options,
      "MigrateApply",
      fromCount
    );
  }

  subscribeMigrateWithFieldsCommenceEvent(
    options: EventSubscribeOptions<TestUpgradableV2Types.MigrateWithFieldsCommenceEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TestUpgradableV2.contract,
      this,
      options,
      "MigrateWithFieldsCommence",
      fromCount
    );
  }

  subscribeMigrateWithFieldsApplyEvent(
    options: EventSubscribeOptions<TestUpgradableV2Types.MigrateWithFieldsApplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TestUpgradableV2.contract,
      this,
      options,
      "MigrateWithFieldsApply",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | TestUpgradableV2Types.ChangeOwnerCommenceEvent
      | TestUpgradableV2Types.ChangeOwnerApplyEvent
      | TestUpgradableV2Types.MigrateCommenceEvent
      | TestUpgradableV2Types.MigrateApplyEvent
      | TestUpgradableV2Types.MigrateWithFieldsCommenceEvent
      | TestUpgradableV2Types.MigrateWithFieldsApplyEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      TestUpgradableV2.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    changeOwner: async (
      params: TestUpgradableV2Types.CallMethodParams<"changeOwner">
    ): Promise<TestUpgradableV2Types.CallMethodResult<"changeOwner">> => {
      return callMethod(
        TestUpgradableV2,
        this,
        "changeOwner",
        params,
        getContractByCodeHash
      );
    },
    migrate: async (
      params: TestUpgradableV2Types.CallMethodParams<"migrate">
    ): Promise<TestUpgradableV2Types.CallMethodResult<"migrate">> => {
      return callMethod(
        TestUpgradableV2,
        this,
        "migrate",
        params,
        getContractByCodeHash
      );
    },
    migrateWithFields: async (
      params: TestUpgradableV2Types.CallMethodParams<"migrateWithFields">
    ): Promise<TestUpgradableV2Types.CallMethodResult<"migrateWithFields">> => {
      return callMethod(
        TestUpgradableV2,
        this,
        "migrateWithFields",
        params,
        getContractByCodeHash
      );
    },
    changeOwnerApply: async (
      params?: TestUpgradableV2Types.CallMethodParams<"changeOwnerApply">
    ): Promise<TestUpgradableV2Types.CallMethodResult<"changeOwnerApply">> => {
      return callMethod(
        TestUpgradableV2,
        this,
        "changeOwnerApply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    migrateApply: async (
      params?: TestUpgradableV2Types.CallMethodParams<"migrateApply">
    ): Promise<TestUpgradableV2Types.CallMethodResult<"migrateApply">> => {
      return callMethod(
        TestUpgradableV2,
        this,
        "migrateApply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    migrateWithFieldsApply: async (
      params?: TestUpgradableV2Types.CallMethodParams<"migrateWithFieldsApply">
    ): Promise<
      TestUpgradableV2Types.CallMethodResult<"migrateWithFieldsApply">
    > => {
      return callMethod(
        TestUpgradableV2,
        this,
        "migrateWithFieldsApply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    resetUpgrade: async (
      params?: TestUpgradableV2Types.CallMethodParams<"resetUpgrade">
    ): Promise<TestUpgradableV2Types.CallMethodResult<"resetUpgrade">> => {
      return callMethod(
        TestUpgradableV2,
        this,
        "resetUpgrade",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getUpgradeDelay: async (
      params?: TestUpgradableV2Types.CallMethodParams<"getUpgradeDelay">
    ): Promise<TestUpgradableV2Types.CallMethodResult<"getUpgradeDelay">> => {
      return callMethod(
        TestUpgradableV2,
        this,
        "getUpgradeDelay",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getOwner: async (
      params?: TestUpgradableV2Types.CallMethodParams<"getOwner">
    ): Promise<TestUpgradableV2Types.CallMethodResult<"getOwner">> => {
      return callMethod(
        TestUpgradableV2,
        this,
        "getOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewOwner: async (
      params?: TestUpgradableV2Types.CallMethodParams<"getNewOwner">
    ): Promise<TestUpgradableV2Types.CallMethodResult<"getNewOwner">> => {
      return callMethod(
        TestUpgradableV2,
        this,
        "getNewOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getUpgradeCommenced: async (
      params?: TestUpgradableV2Types.CallMethodParams<"getUpgradeCommenced">
    ): Promise<
      TestUpgradableV2Types.CallMethodResult<"getUpgradeCommenced">
    > => {
      return callMethod(
        TestUpgradableV2,
        this,
        "getUpgradeCommenced",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewCode: async (
      params?: TestUpgradableV2Types.CallMethodParams<"getNewCode">
    ): Promise<TestUpgradableV2Types.CallMethodResult<"getNewCode">> => {
      return callMethod(
        TestUpgradableV2,
        this,
        "getNewCode",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewImmFieldsEncoded: async (
      params?: TestUpgradableV2Types.CallMethodParams<"getNewImmFieldsEncoded">
    ): Promise<
      TestUpgradableV2Types.CallMethodResult<"getNewImmFieldsEncoded">
    > => {
      return callMethod(
        TestUpgradableV2,
        this,
        "getNewImmFieldsEncoded",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewMutFieldsEncoded: async (
      params?: TestUpgradableV2Types.CallMethodParams<"getNewMutFieldsEncoded">
    ): Promise<
      TestUpgradableV2Types.CallMethodResult<"getNewMutFieldsEncoded">
    > => {
      return callMethod(
        TestUpgradableV2,
        this,
        "getNewMutFieldsEncoded",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getImmValue: async (
      params?: TestUpgradableV2Types.CallMethodParams<"getImmValue">
    ): Promise<TestUpgradableV2Types.CallMethodResult<"getImmValue">> => {
      return callMethod(
        TestUpgradableV2,
        this,
        "getImmValue",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getMutValue: async (
      params?: TestUpgradableV2Types.CallMethodParams<"getMutValue">
    ): Promise<TestUpgradableV2Types.CallMethodResult<"getMutValue">> => {
      return callMethod(
        TestUpgradableV2,
        this,
        "getMutValue",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotal: async (
      params?: TestUpgradableV2Types.CallMethodParams<"getTotal">
    ): Promise<TestUpgradableV2Types.CallMethodResult<"getTotal">> => {
      return callMethod(
        TestUpgradableV2,
        this,
        "getTotal",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    setMutValue: async (
      params: TestUpgradableV2Types.CallMethodParams<"setMutValue">
    ): Promise<TestUpgradableV2Types.CallMethodResult<"setMutValue">> => {
      return callMethod(
        TestUpgradableV2,
        this,
        "setMutValue",
        params,
        getContractByCodeHash
      );
    },
  };

  view = this.methods;

  transact = {
    changeOwner: async (
      params: TestUpgradableV2Types.SignExecuteMethodParams<"changeOwner">
    ): Promise<
      TestUpgradableV2Types.SignExecuteMethodResult<"changeOwner">
    > => {
      return signExecuteMethod(TestUpgradableV2, this, "changeOwner", params);
    },
    migrate: async (
      params: TestUpgradableV2Types.SignExecuteMethodParams<"migrate">
    ): Promise<TestUpgradableV2Types.SignExecuteMethodResult<"migrate">> => {
      return signExecuteMethod(TestUpgradableV2, this, "migrate", params);
    },
    migrateWithFields: async (
      params: TestUpgradableV2Types.SignExecuteMethodParams<"migrateWithFields">
    ): Promise<
      TestUpgradableV2Types.SignExecuteMethodResult<"migrateWithFields">
    > => {
      return signExecuteMethod(
        TestUpgradableV2,
        this,
        "migrateWithFields",
        params
      );
    },
    changeOwnerApply: async (
      params: TestUpgradableV2Types.SignExecuteMethodParams<"changeOwnerApply">
    ): Promise<
      TestUpgradableV2Types.SignExecuteMethodResult<"changeOwnerApply">
    > => {
      return signExecuteMethod(
        TestUpgradableV2,
        this,
        "changeOwnerApply",
        params
      );
    },
    migrateApply: async (
      params: TestUpgradableV2Types.SignExecuteMethodParams<"migrateApply">
    ): Promise<
      TestUpgradableV2Types.SignExecuteMethodResult<"migrateApply">
    > => {
      return signExecuteMethod(TestUpgradableV2, this, "migrateApply", params);
    },
    migrateWithFieldsApply: async (
      params: TestUpgradableV2Types.SignExecuteMethodParams<"migrateWithFieldsApply">
    ): Promise<
      TestUpgradableV2Types.SignExecuteMethodResult<"migrateWithFieldsApply">
    > => {
      return signExecuteMethod(
        TestUpgradableV2,
        this,
        "migrateWithFieldsApply",
        params
      );
    },
    resetUpgrade: async (
      params: TestUpgradableV2Types.SignExecuteMethodParams<"resetUpgrade">
    ): Promise<
      TestUpgradableV2Types.SignExecuteMethodResult<"resetUpgrade">
    > => {
      return signExecuteMethod(TestUpgradableV2, this, "resetUpgrade", params);
    },
    getUpgradeDelay: async (
      params: TestUpgradableV2Types.SignExecuteMethodParams<"getUpgradeDelay">
    ): Promise<
      TestUpgradableV2Types.SignExecuteMethodResult<"getUpgradeDelay">
    > => {
      return signExecuteMethod(
        TestUpgradableV2,
        this,
        "getUpgradeDelay",
        params
      );
    },
    getOwner: async (
      params: TestUpgradableV2Types.SignExecuteMethodParams<"getOwner">
    ): Promise<TestUpgradableV2Types.SignExecuteMethodResult<"getOwner">> => {
      return signExecuteMethod(TestUpgradableV2, this, "getOwner", params);
    },
    getNewOwner: async (
      params: TestUpgradableV2Types.SignExecuteMethodParams<"getNewOwner">
    ): Promise<
      TestUpgradableV2Types.SignExecuteMethodResult<"getNewOwner">
    > => {
      return signExecuteMethod(TestUpgradableV2, this, "getNewOwner", params);
    },
    getUpgradeCommenced: async (
      params: TestUpgradableV2Types.SignExecuteMethodParams<"getUpgradeCommenced">
    ): Promise<
      TestUpgradableV2Types.SignExecuteMethodResult<"getUpgradeCommenced">
    > => {
      return signExecuteMethod(
        TestUpgradableV2,
        this,
        "getUpgradeCommenced",
        params
      );
    },
    getNewCode: async (
      params: TestUpgradableV2Types.SignExecuteMethodParams<"getNewCode">
    ): Promise<TestUpgradableV2Types.SignExecuteMethodResult<"getNewCode">> => {
      return signExecuteMethod(TestUpgradableV2, this, "getNewCode", params);
    },
    getNewImmFieldsEncoded: async (
      params: TestUpgradableV2Types.SignExecuteMethodParams<"getNewImmFieldsEncoded">
    ): Promise<
      TestUpgradableV2Types.SignExecuteMethodResult<"getNewImmFieldsEncoded">
    > => {
      return signExecuteMethod(
        TestUpgradableV2,
        this,
        "getNewImmFieldsEncoded",
        params
      );
    },
    getNewMutFieldsEncoded: async (
      params: TestUpgradableV2Types.SignExecuteMethodParams<"getNewMutFieldsEncoded">
    ): Promise<
      TestUpgradableV2Types.SignExecuteMethodResult<"getNewMutFieldsEncoded">
    > => {
      return signExecuteMethod(
        TestUpgradableV2,
        this,
        "getNewMutFieldsEncoded",
        params
      );
    },
    getImmValue: async (
      params: TestUpgradableV2Types.SignExecuteMethodParams<"getImmValue">
    ): Promise<
      TestUpgradableV2Types.SignExecuteMethodResult<"getImmValue">
    > => {
      return signExecuteMethod(TestUpgradableV2, this, "getImmValue", params);
    },
    getMutValue: async (
      params: TestUpgradableV2Types.SignExecuteMethodParams<"getMutValue">
    ): Promise<
      TestUpgradableV2Types.SignExecuteMethodResult<"getMutValue">
    > => {
      return signExecuteMethod(TestUpgradableV2, this, "getMutValue", params);
    },
    getTotal: async (
      params: TestUpgradableV2Types.SignExecuteMethodParams<"getTotal">
    ): Promise<TestUpgradableV2Types.SignExecuteMethodResult<"getTotal">> => {
      return signExecuteMethod(TestUpgradableV2, this, "getTotal", params);
    },
    setMutValue: async (
      params: TestUpgradableV2Types.SignExecuteMethodParams<"setMutValue">
    ): Promise<
      TestUpgradableV2Types.SignExecuteMethodResult<"setMutValue">
    > => {
      return signExecuteMethod(TestUpgradableV2, this, "setMutValue", params);
    },
  };

  async multicall<Calls extends TestUpgradableV2Types.MultiCallParams>(
    calls: Calls
  ): Promise<TestUpgradableV2Types.MultiCallResults<Calls>> {
    return (await multicallMethods(
      TestUpgradableV2,
      this,
      calls,
      getContractByCodeHash
    )) as TestUpgradableV2Types.MultiCallResults<Calls>;
  }
}
