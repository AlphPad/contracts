/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { RunScriptResult, DeployContractExecutionResult } from "@alephium/cli";
import { NetworkId } from "@alephium/web3";
import {
  ApadToken,
  ApadTokenInstance,
  StakingAccount,
  StakingAccountInstance,
  Staking,
  StakingInstance,
  RewardDistributor,
  RewardDistributorInstance,
  SaleBuyerAccount,
  SaleBuyerAccountInstance,
  SaleFlatPriceAlph,
  SaleFlatPriceAlphInstance,
  SaleManager,
  SaleManagerInstance,
  TokenPair,
  TokenPairInstance,
  DummyToken,
  DummyTokenInstance,
  SaleFlatPriceAlphV2,
  SaleFlatPriceAlphV2Instance,
  SaleManagerV2,
  SaleManagerV2Instance,
  BurnALPH,
  BurnALPHInstance,
} from ".";
import { default as mainnetDeployments } from "../.deployments.mainnet.json";
import { default as testnetDeployments } from "../.deployments.testnet.json";
import { default as devnetDeployments } from "../.deployments.devnet.json";

export type Deployments = {
  deployerAddress: string;
  contracts: {
    ApadToken: DeployContractExecutionResult<ApadTokenInstance>;
    StakingAccount: DeployContractExecutionResult<StakingAccountInstance>;
    Staking: DeployContractExecutionResult<StakingInstance>;
    RewardDistributor: DeployContractExecutionResult<RewardDistributorInstance>;
    SaleBuyerAccount: DeployContractExecutionResult<SaleBuyerAccountInstance>;
    SaleFlatPriceAlph: DeployContractExecutionResult<SaleFlatPriceAlphInstance>;
    SaleManager: DeployContractExecutionResult<SaleManagerInstance>;
    TokenPair?: DeployContractExecutionResult<TokenPairInstance>;
    DummyToken?: DeployContractExecutionResult<DummyTokenInstance>;
    SaleFlatPriceAlphV2?: DeployContractExecutionResult<SaleFlatPriceAlphV2Instance>;
    SaleManagerV2?: DeployContractExecutionResult<SaleManagerV2Instance>;
    BurnALPH?: DeployContractExecutionResult<BurnALPHInstance>;
  };
  scripts: { StakingStakeTX: RunScriptResult };
};

function toDeployments(json: any): Deployments {
  const contracts = {
    ApadToken: {
      ...json.contracts["ApadToken"],
      contractInstance: ApadToken.at(
        json.contracts["ApadToken"].contractInstance.address
      ),
    },
    StakingAccount: {
      ...json.contracts["StakingAccount"],
      contractInstance: StakingAccount.at(
        json.contracts["StakingAccount"].contractInstance.address
      ),
    },
    Staking: {
      ...json.contracts["Staking"],
      contractInstance: Staking.at(
        json.contracts["Staking"].contractInstance.address
      ),
    },
    RewardDistributor: {
      ...json.contracts["RewardDistributor"],
      contractInstance: RewardDistributor.at(
        json.contracts["RewardDistributor"].contractInstance.address
      ),
    },
    SaleBuyerAccount: {
      ...json.contracts["SaleBuyerAccount"],
      contractInstance: SaleBuyerAccount.at(
        json.contracts["SaleBuyerAccount"].contractInstance.address
      ),
    },
    SaleFlatPriceAlph: {
      ...json.contracts["SaleFlatPriceAlph"],
      contractInstance: SaleFlatPriceAlph.at(
        json.contracts["SaleFlatPriceAlph"].contractInstance.address
      ),
    },
    SaleManager: {
      ...json.contracts["SaleManager"],
      contractInstance: SaleManager.at(
        json.contracts["SaleManager"].contractInstance.address
      ),
    },
    TokenPair:
      json.contracts["TokenPair"] === undefined
        ? undefined
        : {
            ...json.contracts["TokenPair"],
            contractInstance: TokenPair.at(
              json.contracts["TokenPair"].contractInstance.address
            ),
          },
    DummyToken:
      json.contracts["DummyToken"] === undefined
        ? undefined
        : {
            ...json.contracts["DummyToken"],
            contractInstance: DummyToken.at(
              json.contracts["DummyToken"].contractInstance.address
            ),
          },
    SaleFlatPriceAlphV2:
      json.contracts["SaleFlatPriceAlphV2"] === undefined
        ? undefined
        : {
            ...json.contracts["SaleFlatPriceAlphV2"],
            contractInstance: SaleFlatPriceAlphV2.at(
              json.contracts["SaleFlatPriceAlphV2"].contractInstance.address
            ),
          },
    SaleManagerV2:
      json.contracts["SaleManagerV2"] === undefined
        ? undefined
        : {
            ...json.contracts["SaleManagerV2"],
            contractInstance: SaleManagerV2.at(
              json.contracts["SaleManagerV2"].contractInstance.address
            ),
          },
    BurnALPH:
      json.contracts["BurnALPH"] === undefined
        ? undefined
        : {
            ...json.contracts["BurnALPH"],
            contractInstance: BurnALPH.at(
              json.contracts["BurnALPH"].contractInstance.address
            ),
          },
  };
  return {
    ...json,
    contracts: contracts as Deployments["contracts"],
    scripts: { StakingStakeTX: json.scripts["StakingStakeTX"] },
  };
}

export function loadDeployments(
  networkId: NetworkId,
  deployerAddress?: string
): Deployments {
  const deployments =
    networkId === "mainnet"
      ? mainnetDeployments
      : networkId === "testnet"
      ? testnetDeployments
      : networkId === "devnet"
      ? devnetDeployments
      : undefined;
  if (deployments === undefined) {
    throw Error("The contract has not been deployed to the " + networkId);
  }
  const allDeployments: any[] = Array.isArray(deployments)
    ? deployments
    : [deployments];
  if (deployerAddress === undefined) {
    if (allDeployments.length > 1) {
      throw Error(
        "The contract has been deployed multiple times on " +
          networkId +
          ", please specify the deployer address"
      );
    } else {
      return toDeployments(allDeployments[0]);
    }
  }
  const result = allDeployments.find(
    (d) => d.deployerAddress === deployerAddress
  );
  if (result === undefined) {
    throw Error("The contract deployment result does not exist");
  }
  return toDeployments(result);
}
