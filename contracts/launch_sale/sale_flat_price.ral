// Contract SaleFlatPrice
// - Manages a flat price token sale with optional whitelist.
// - Extends AccountFactory for buyer account management and SaleBase for common sale functionalities.
Abstract Contract SaleFlatPrice(
    rewardDistributor: RewardDistributor,   // Reward distributor for managing rewards
    saleOwner: Address,                     // Owner of the sale
    accountTemplateId: ByteVec,             // Template ID for creating buyer accounts
    tokenPrice: U256,                       // Price of the token in the sale
    saleStart: U256,                        // Start time of the sale
    saleEnd: U256,                          // End time of the sale
    minRaise: U256,                         // Minimum amount to be raised
    maxRaise: U256,                         // Maximum amount to be raised
    saleTokenId: ByteVec,                   // ID of the token being sold
    saleTokenTotalAmount: U256,             // Total amount of tokens available for sale
    bidTokenId: ByteVec,                    // Token used for bidding
    whitelistSaleStart: U256,               // Start time of the whitelist sale
    whitelistSaleEnd: U256,                 // End time of the whitelist sale
    whitelistBuyerMaxBid: U256,             // Maximum bid amount for whitelisted buyers
    mut tokensSold: U256,                   // Amount of tokens sold
    mut totalRaised: U256,                  // Total funds raised in the sale
    mut merkleRoot: ByteVec                 // Merkle root for whitelist verification
) extends AccountFactory(accountTemplateId), 
    SaleBase(
        saleOwner,
        saleStart, 
        saleEnd, 
        minRaise, 
        maxRaise, 
        saleTokenId, 
        bidTokenId, 
        whitelistSaleStart, 
        whitelistSaleEnd, 
        tokensSold,
        totalRaised,
        merkleRoot
) {

    // Event declarations
    event Buy(account: Address, buyBidAmount: U256, buyTokenAmount: U256)

    // Error codes specific to claiming operations in this contract.
    enum ErrorCodes {
        PriceMoreThanMax = 601
        PriceLessThanMin = 602
        BidMoreThanMax = 603
        BidLessThanMin = 604
        InvalidClaimAmount = 605
        SaleTokenTotalExceeded = 606
        SaleOwnerCanNotBid = 607
        BuyerNotWhitelisted = 608
        SaleTokenMoreThan18Decimal = 609
        SaleAmountSmallerThanMin = 610
        SaleAmountLargerThanMax = 611
    }

    // Handles token purchasing by buyers. Validates sale conditions and processes token allocation.
    @using(preapprovedAssets = true, assetsInContract = true, checkExternalCaller = false, updateFields = true)
    pub fn buy(bidAmount: U256, wlMerkleProof: ByteVec) -> () {
        assertSaleLive()
        let account = callerAddress!()
        assert!(account != saleOwner, ErrorCodes.SaleOwnerCanNotBid)

        // If it's a whitelist sale, verifies the buyer's eligibility
        if(isWhitelistSale() && isWhitelistSaleLive()){
            assert!(verify(wlMerkleProof, keccak256!(toByteVec!(account))), ErrorCodes.BuyerNotWhitelisted)
            if (accountExists(account)) {
                let buyerAccountCurrent = SaleBuyerAccount(getSubContractId(account))
                assert!(bidAmount + buyerAccountCurrent.getAmountBid() <= whitelistBuyerMaxBid, ErrorCodes.BidMoreThanMax)
            } else {
                assert!(bidAmount <= whitelistBuyerMaxBid, ErrorCodes.BidMoreThanMax)
            }
        }

        let tokensReceived = calculateSaleTokensReceivedPerBidTokens(bidAmount)
        assert!(tokensSold + tokensReceived <= saleTokenTotalAmount, ErrorCodes.SaleTokenTotalExceeded)

        transferTokenToSelf!(account, bidTokenId, bidAmount)

        // Manages buyer accounts and updates sale state
        if (!accountExists(account)) {
            let (encodedImmFieldsReg, encodedMutFieldsReg) = SaleBuyerAccount.encodeFields!(
                selfAddress!(),
                account, 
                tokensReceived, bidAmount, 0, 0)
            createAccount{account -> ALPH: 1 alph}(account,encodedImmFieldsReg, encodedMutFieldsReg)
        } else {
            let buyerAccount = SaleBuyerAccount(getSubContractId(account))
            buyerAccount.buy(tokensReceived, bidAmount)
        }

        tokensSold = tokensSold + tokensReceived
        totalRaised = totalRaised + bidAmount

        emit Buy(account, bidAmount, tokensReceived)
    }

    // Allows buyers to claim their purchased tokens after the sale concludes.
    @using(assetsInContract = true)
    fn claimBuyer(caller: Address, amount: U256) -> () {
        let buyerAccount = SaleBuyerAccount(getSubContractId(caller))
        assert!(amount == buyerAccount.getAmountBuy(), ErrorCodes.InvalidClaimAmount)
        buyerAccount.claim(amount)
        transferTokenFromSelf!(caller, saleTokenId, amount)
        if(buyerAccount.isSafeToDestroy()) {
            destroyAccount(caller)
        }
    }

    // Allows buyers to get a refund if the sale conditions are not met (e.g., min raise not achieved).
    @using(assetsInContract = true)
    fn claimBuyerRefund(caller: Address, amount: U256) -> () {
        let buyerAccount = SaleBuyerAccount(getSubContractId(caller))
        assert!(amount == buyerAccount.getAmountBid(), ErrorCodes.InvalidClaimAmount)
        buyerAccount.claimRefund(amount)
        transferTokenFromSelf!(caller, bidTokenId, amount)
        if(buyerAccount.isSafeToDestroy()) {
            destroyAccount(caller)
        }
    }

    // Allows the sale owner to claim back the unsold tokens if the sale does not reach the min raise.
    @using(assetsInContract = true)
    fn claimSellerRefund(amount: U256) -> () {
        assert!(amount == saleTokenTotalAmount, ErrorCodes.InvalidClaimAmount)
        transferTokenFromSelf!(saleOwner, saleTokenId, saleTokenTotalAmount)
    }

    @using(checkExternalCaller = false)
    pub fn calculateSaleTokensReceivedPerBidTokens(bidAmount: U256) -> U256 {
        assertPriceInRange()
        assertSaleAmountInRange()
        assertBidAmountInRange(bidAmount)
        let saleTokenDecimals = IFungibleToken(saleTokenId).getDecimals()
        let bidTokenDecimals = getBidTokenDecimals()
        assert!(saleTokenDecimals <= 18, ErrorCodes.SaleTokenMoreThan18Decimal)
        
        let scaledUpBid = bidAmount * (10**bidTokenDecimals) // To maintain precision when dividing
        let tokensReceivedInBidScale = scaledUpBid / tokenPrice // tokenPrice is on same scale as bidAmount
        if (saleTokenDecimals > bidTokenDecimals) { // scale up if sale token has more decimals
            return tokensReceivedInBidScale * (10**(saleTokenDecimals - bidTokenDecimals))
        } else { // scale down if sale token has less decimals
            return tokensReceivedInBidScale / (10**(bidTokenDecimals - saleTokenDecimals))
        }
    }

    // Let deriving contracts define the bid decimals
    pub fn getBidTokenDecimals() -> U256

    fn assertPriceInRange() -> () {
        assert!(tokenPrice <= 1 * (10**32), ErrorCodes.PriceMoreThanMax) // price can't be bigger than 32 digits to avoid overflows on multiplication
        assert!(tokenPrice >= 1, ErrorCodes.PriceLessThanMin) // price must be bigger than 0 to avoid dividing with 0
    }
    
    fn assertBidAmountInRange(bidAmount: U256) -> () {
        assert!(bidAmount <= 1 * (10**32), ErrorCodes.BidMoreThanMax) // bid can't be bigger than 32 digits to avoid overflows on multiplication
        assert!(bidAmount >= 1, ErrorCodes.BidLessThanMin) // bid must be bigger than 0 to avoid dividing with 0
    }    

    fn assertSaleAmountInRange() -> () {
        assert!(saleTokenTotalAmount >= 1 * (10**6), ErrorCodes.SaleAmountSmallerThanMin) // Number with at least 6 digits
        assert!(saleTokenTotalAmount <= 1 * (10**36), ErrorCodes.SaleAmountLargerThanMax) // Number with less than 36 digits
    }  
}
